openapi: 3.0.3
info:
  title: Lena API
  version: 1.0.0
paths:
  /v1/activities:
    get:
      operationId: List Activities
      description: List all activities
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: course
        schema:
          type: string
          format: uuid
      - in: query
        name: force_refresh
        schema:
          type: boolean
        description: Clear cache and fetch activities
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: type
        schema:
          type: string
          enum:
          - announcement
          - assignment
          - discussion
          - grade
          - quiz
          - reply
        description: |-
          * `reply` - Reply
          * `discussion` - Discussion
          * `announcement` - Announcement
          * `assignment` - Assignment
          * `quiz` - Quiz
          * `grade` - Grade
      tags:
      - activities
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedActivityList'
          description: ''
    post:
      operationId: Create Activity
      description: Create a new assignment
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      tags:
      - activities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateActivity'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateActivity'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateActivity'
          description: ''
  /v1/activities/{id}:
    get:
      operationId: activities_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this activity.
        required: true
      tags:
      - activities
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
          description: ''
    put:
      operationId: Update Activity
      description: Update an activity by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this activity.
        required: true
      tags:
      - activities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateActivity'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateActivity'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateActivity'
          description: ''
    patch:
      operationId: Update Activity (Partial)
      description: Update an activity by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this activity.
        required: true
      tags:
      - activities
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUpdateActivity'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUpdateActivity'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Activity'
          description: ''
    delete:
      operationId: Delete Activity
      description: Delete an activity
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this activity.
        required: true
      tags:
      - activities
      responses:
        '204':
          description: No response body
  /v1/announcements:
    get:
      operationId: List Announcements
      description: List all announcements
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: course
        schema:
          type: string
          format: uuid
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - announcements
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadAnnouncement'
          description: ''
    post:
      operationId: Create Announcement
      description: Create a new announcement
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - announcements
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAnnouncement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateAnnouncement'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAnnouncement'
          description: ''
  /v1/announcements/{id}:
    get:
      operationId: Get Assignment
      description: Retrieve an announcement
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this announcement.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - announcements
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadAnnouncement'
          description: ''
    put:
      operationId: Update Announcement
      description: Update an announcement
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this announcement.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - announcements
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAnnouncement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateAnnouncement'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAnnouncement'
          description: ''
    patch:
      operationId: Update Announcement (Partial)
      description: Update an announcement
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this announcement.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - announcements
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUpdateAnnouncement'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUpdateAnnouncement'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadAnnouncement'
          description: ''
    delete:
      operationId: Delete Announcement
      description: Delete an announcement
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this announcement.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - announcements
      responses:
        '204':
          description: No response body
  /v1/assignments:
    get:
      operationId: List Assignments
      description: List all assignments
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: course
        schema:
          type: string
          format: uuid
      - in: query
        name: deadline
        schema:
          type: string
          format: date
        description: deadline of assignment, eg 2025-06-19
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: status
        schema:
          type: string
          nullable: true
          enum:
          - closed
          - draft
          - published
        description: |-
          * `published` - Published
          * `closed` - Closed
          * `draft` - Draft
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - assignments
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Assignment'
          description: ''
    post:
      operationId: Create Assignment
      description: Create a new assignment
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - assignments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAssignment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateAssignment'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateAssignment'
          description: ''
  /v1/assignments/{id}:
    get:
      operationId: assignments_retrieve
      description: A viewset for viewing and editing assignments.
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this assignment.
        required: true
      tags:
      - assignments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
          description: ''
    put:
      operationId: Update Assignment
      description: Update an assignment by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this assignment.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - assignments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAssignment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateAssignment'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
          description: ''
    patch:
      operationId: Update Assignment (Partial)
      description: Update an assignment by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this assignment.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - assignments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUpdateAssignment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUpdateAssignment'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateAssignment'
          description: ''
    delete:
      operationId: Delete Assignemnt
      description: Delete an assignment
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this assignment.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - assignments
      responses:
        '204':
          description: No response body
  /v1/assignments/{id}/duplicate:
    post:
      operationId: Duplicate Assignment
      description: duplicates an assignment
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this assignment.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - assignments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
          description: ''
  /v1/assignments/{id}/reset_grade:
    post:
      operationId: Reset Grade
      description: Reset the grade for a submission for an assignment
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this assignment.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - assignments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentResetSubmission'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AssignmentResetSubmission'
        required: true
      responses: {}
  /v1/assignments/{id}/stats:
    post:
      operationId: assignments_stats_create
      description: Report statistics of an assignment
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this assignment.
        required: true
      tags:
      - assignments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Assignment'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Assignment'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Assignment'
          description: ''
  /v1/assignments/{id}/submit:
    post:
      operationId: Submit Assignment
      description: Submit an assignment
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this assignment.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
        required: true
      tags:
      - assignments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubmission'
            examples:
              SubmitExample:
                value:
                  files:
                  - id: null
                    url: https://res.cloudinary.com/dja2jw9ld/raw/upload/v1733217677/files/Mubarak%20Idoko%20_%20Senior%20Honors%20Thesis%20_%20Report.pdf
                    date: '2024-12-03T09:21:17.000Z'
                    name: Mubarak Idoko _ Senior Honors Thesis _ Report.pdf
                    path: null
                    size: 3578413.34
                    author: null
                    file_type: pdf
                    public_id: files/Mubarak Idoko _ Senior Honors Thesis _ Report.pdf
                    file_bytes: null
                  notes: From Student ABC
                summary: submit example
                description: submit example
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateSubmission'
      responses: {}
  /v1/billing:
    get:
      operationId: List Billings
      description: List billings for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      tags:
      - school_billing
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Billing'
          description: ''
    post:
      operationId: Create Billing
      description: Create a new billing for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      tags:
      - school_billing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BillingCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingCreate'
          description: ''
  /v1/billing/{id}:
    get:
      operationId: Retrieve Billing
      description: Retrieve a billing for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this billing.
        required: true
      tags:
      - school_billing
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingDetail'
          description: ''
    put:
      operationId: Update Billing
      description: Update a billing for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this billing.
        required: true
      tags:
      - school_billing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BillingUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BillingUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingUpdate'
          description: ''
    patch:
      operationId: Update Billing (Partial)
      description: Partially update a billing for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this billing.
        required: true
      tags:
      - school_billing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedBillingUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedBillingUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BillingUpdate'
          description: ''
    delete:
      operationId: Delete Billing
      description: Delete a billing for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this billing.
        required: true
      tags:
      - school_billing
      responses:
        '204':
          description: No response body
  /v1/billing/charge:
    post:
      operationId: billing_charge_create
      description: Charge the card to get back a tokenized card
      tags:
      - billing
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Billing'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Billing'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Billing'
          description: ''
  /v1/billing/verify:
    get:
      operationId: billing_verify_retrieve
      description: verify a payment by its transaction reference tx_ref
      tags:
      - billing
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Billing'
          description: ''
  /v1/calendar/activity:
    get:
      operationId: calendar_activity_list
      description: List all activities
      summary: List Calendar Activities
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: course
        schema:
          type: string
          format: uuid
      - in: query
        name: deadline
        schema:
          type: string
          format: date
        description: deadline of the quiz or assignment eg 2024-04-30
      tags:
      - calendar
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CalendarActivity'
          description: ''
    post:
      operationId: Create Calendar Activity
      description: Create new activities
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      tags:
      - calendar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarActivityCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CalendarActivityCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarActivity'
          description: ''
  /v1/calendar/activity/{id}:
    get:
      operationId: Get Calendar Activity
      description: View a single activity
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this activity.
        required: true
      tags:
      - calendar
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarActivity'
          description: ''
    put:
      operationId: Update Calendar Activity
      description: Update existing activities
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this activity.
        required: true
      tags:
      - calendar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CalendarActivityUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CalendarActivityUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarActivityUpdate'
          description: ''
    patch:
      operationId: Update Calendar Activity (Partial)
      description: Update existing activities
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this activity.
        required: true
      tags:
      - calendar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCalendarActivityUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCalendarActivityUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarActivityUpdate'
          description: ''
    delete:
      operationId: Delete Calendar Activity
      description: Delete existing activities
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this activity.
        required: true
      tags:
      - calendar
      responses:
        '204':
          description: No response body
  /v1/calendar/activity/course:
    get:
      operationId: Get Course Activities
      description: Get all activities in a course
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: pk
        schema:
          type: string
          format: uuid
        description: The course id
        required: true
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      tags:
      - calendar
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CalendarActivity'
          description: ''
  /v1/calendar/schedule:
    get:
      operationId: List Schedules
      description: List all schedules
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: query
        name: course
        schema:
          type: string
          format: uuid
      - in: query
        name: course__state
        schema:
          type: string
          nullable: true
          enum:
          - archived
          - closed
          - draft
          - published
        description: |-
          * `published` - Published
          * `draft` - Draft
          * `archived` - Archived
          * `closed` - Closed
      - in: query
        name: day_of_week
        schema:
          type: string
          nullable: true
          enum:
          - friday
          - monday
          - saturday
          - sunday
          - thursday
          - tuesday
          - wednesday
        description: |-
          * `monday` - Monday
          * `tuesday` - Tuesday
          * `wednesday` - Wednesday
          * `thursday` - Thursday
          * `friday` - Friday
          * `saturday` - Saturday
          * `sunday` - Sunday
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: start_time
        schema:
          type: string
          format: date-time
      tags:
      - calendar
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
          description: ''
    post:
      operationId: Create Schedule
      description: "Create a new schedule\n            <ul>\n            <li><code>day_of_week</code>\
        \ is required, but will be overriden if <code>days_of_week</code> contain\
        \ data</li>\n            <li>The response data will be an array if <code>days_of_week</code>\
        \ is present.</li>\n            </ul>\n            "
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      tags:
      - calendar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ScheduleCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
          description: ''
  /v1/calendar/schedule/{id}:
    get:
      operationId: Get Schedule
      description: View a single schedule
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this schedule.
        required: true
      tags:
      - calendar
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
          description: ''
    put:
      operationId: Update Schedule
      description: Update a schedule
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this schedule.
        required: true
      tags:
      - calendar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScheduleUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ScheduleUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScheduleUpdate'
          description: ''
    patch:
      operationId: Update Schedule (Partial)
      description: Update a schedule
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this schedule.
        required: true
      tags:
      - calendar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSchedule'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSchedule'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
          description: ''
    delete:
      operationId: Delete Schedule
      description: Delete a schedule
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this schedule.
        required: true
      tags:
      - calendar
      responses:
        '204':
          description: No response body
  /v1/calendar/schedule/course:
    get:
      operationId: Get Schedule by Course
      description: |-
        Get all schedules based on a given course.

        Raises:
            Http404: If no schedules are found for the specified course.
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: pk
        schema:
          type: string
          format: uuid
        description: The course id
        required: true
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      tags:
      - calendar
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
          description: ''
  /v1/calendar/schedule/create_many:
    post:
      operationId: Create Multiple Schedule
      description: Create multiple schedules
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      tags:
      - calendar
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ScheduleCreate'
          multipart/form-data:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ScheduleCreate'
        required: true
      responses:
        '201':
          description: No response body
  /v1/calendar/schedule/today:
    get:
      operationId: Get Today Schedule
      description: Get class schedules for today based on user's teacher courses.
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: query
        name: course
        schema:
          type: string
          format: uuid
      - in: query
        name: course__state
        schema:
          type: string
          nullable: true
          enum:
          - archived
          - closed
          - draft
          - published
        description: |-
          * `published` - Published
          * `draft` - Draft
          * `archived` - Archived
          * `closed` - Closed
      - in: query
        name: day_of_week
        schema:
          type: string
          nullable: true
          enum:
          - friday
          - monday
          - saturday
          - sunday
          - thursday
          - tuesday
          - wednesday
        description: |-
          * `monday` - Monday
          * `tuesday` - Tuesday
          * `wednesday` - Wednesday
          * `thursday` - Thursday
          * `friday` - Friday
          * `saturday` - Saturday
          * `sunday` - Sunday
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: start_time
        schema:
          type: string
          format: date-time
      tags:
      - calendar
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
          description: ''
  /v1/calendar/schedule/user:
    get:
      operationId: Get User Schedule
      description: Returns a list of schedules and activities based on user courses
      tags:
      - calendar
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSchedule'
          description: ''
  /v1/comments:
    get:
      operationId: List Comments
      description: List all comments
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: assignment
        schema:
          type: string
        description: Query parameter example
        examples:
          Assignment:
            value: abc123
            summary: assignment
      - in: query
        name: grade
        schema:
          type: string
          format: uuid
      - in: query
        name: question
        schema:
          type: string
          format: uuid
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      tags:
      - comments
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
          description: ''
    post:
      operationId: Create Comment
      description: Create a new comment
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentCreate'
          description: ''
  /v1/comments/{id}:
    get:
      operationId: Get Comment
      description: Retrieve a comment by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this comment.
        required: true
      tags:
      - comments
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Comment'
          description: ''
    put:
      operationId: Update Comment
      description: Update a comment by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this comment.
        required: true
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentUpdate'
          description: ''
    patch:
      operationId: Update Comment (Partial)
      description: Update a comment by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this comment.
        required: true
      tags:
      - comments
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCommentUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCommentUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentUpdate'
          description: ''
    delete:
      operationId: Delete Comment
      description: Delete a comment
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this comment.
        required: true
      tags:
      - comments
      responses:
        '204':
          description: No response body
  /v1/courses:
    get:
      operationId: List Courses
      description: List all courses
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: arm
        schema:
          type: string
      - in: query
        name: department
        schema:
          type: string
          format: uuid
      - in: query
        name: faculty
        schema:
          type: string
          format: uuid
      - in: query
        name: school
        schema:
          type: string
          format: uuid
      - in: query
        name: school_grade
        schema:
          type: string
          format: uuid
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: state
        schema:
          type: string
          nullable: true
          enum:
          - archived
          - closed
          - draft
          - published
        description: |-
          * `published` - Published
          * `draft` - Draft
          * `archived` - Archived
          * `closed` - Closed
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: query
        name: teacher
        schema:
          type: string
          format: uuid
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      - in: query
        name: teacher__user__email
        schema:
          type: string
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
          description: ''
    post:
      operationId: courses_create
      description: |-
        API view set for managing courses.
        This view set provides CRUD operations for courses, as well as custom actions
        to manage course registration and retrieve courses for a specific teacher or student.
        ATTRIBUTES
        ----------
        queryset : QuerySet
            The default set of courses to be used for list operations.
        serializer_class : Serializer
            The default serializer class for the course model.
        service : CourseService
            Service layer used for course-related operations.
        permission_classes : list
            Default set of permissions applied to this view set.

        METHODS
        -------
        get_permissions() -> List[BasePermission]:
            Customize permissions based on the action.
        create(request: Request, *args, **kwargs) -> Response:
            Handle the creation of a new course.
        update(request: Request, *args, **kwargs) -> Response:
            Handle updating an existing course.
        destroy(request: Request, *args, **kwargs) -> Response:
            Handle deletion of a course.
        set_entry_code(request: Request, *args, **kwargs) -> Response:
            Set an entry code for a specific course.
        open_registration(request: Request, *args, **kwargs) -> Response:
            Open a specific course for student registration.
        close_registration(request: Request, *args, **kwargs) -> Response:
            Close a specific course for student registration.
        register_student(request: Request, *args, **kwargs) -> Response:
            Handle a student's registration to a specific course.
        teacher_courses(request: Request) -> Response:
            Retrieve all courses created by the authenticated teacher.
        student_courses(request: Request) -> Response:
            Retrieve all courses that the authenticated student has registered for.
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Course'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Course'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
  /v1/courses/{id}:
    get:
      operationId: Get a Course
      description: Retrieve a course by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
    put:
      operationId: Update Course
      description: Update a course by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditCourse'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EditCourse'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditCourse'
          description: ''
    patch:
      operationId: Update Course (Partial)
      description: Update a course by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEditCourse'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEditCourse'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditCourse'
          description: ''
    delete:
      operationId: Delete Course
      description: Delete a course
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      responses:
        '204':
          description: No response body
  /v1/courses/{id}/close_registration:
    post:
      operationId: Close Course Registration
      description: Close a course registration
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
  /v1/courses/{id}/course_materials_and_folders:
    get:
      operationId: Get Course Materials and Folders
      description: Retrieve all folders and materials that are attributed to a course
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoldersAndMaterials'
          description: ''
  /v1/courses/{id}/create_folder:
    post:
      operationId: Create Folder
      description: Create a folder for a course
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourseFolder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateCourseFolder'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseFolder'
          description: ''
  /v1/courses/{id}/create_material:
    post:
      operationId: Create Course Material
      description: Create a material for a course
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourseMaterial'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateCourseMaterial'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseMaterial'
          description: ''
  /v1/courses/{id}/create_multiple_materials:
    post:
      operationId: Create Multiple Course Materials
      description: Create multiple materials for a course
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateCourseMaterial'
          multipart/form-data:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateCourseMaterial'
        required: true
      responses:
        '200':
          description: No response body
  /v1/courses/{id}/delete_folders_and_materials:
    post:
      operationId: Delete Multiple Folders and Materials
      description: Delete multiple course folders and materials
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteFoldersAndMaterials'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DeleteFoldersAndMaterials'
        required: true
      responses:
        '200':
          description: No response body
  /v1/courses/{id}/duplicate:
    post:
      operationId: Duplicate Course
      description: Duplicate a course and all its corresponding data
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: query
        name: assignments
        schema:
          type: boolean
      - in: query
        name: groups
        schema:
          type: boolean
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: query
        name: materials
        schema:
          type: boolean
      - in: query
        name: outlines
        schema:
          type: boolean
      - in: query
        name: quizzes
        schema:
          type: boolean
      - in: query
        name: schedules
        schema:
          type: boolean
      - in: query
        name: students
        schema:
          type: boolean
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      - in: query
        name: teachers
        schema:
          type: boolean
      tags:
      - courses
      responses:
        '200':
          description: No response body
  /v1/courses/{id}/get_course_folders:
    get:
      operationId: Get Course Folders
      description: Retrieve all folders that are attributed to a course with filters
        included
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: query
        name: name
        schema:
          type: string
        description: name filter
        examples:
          Name:
            value: outlines
            summary: name
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseFolder'
              examples:
                Response:
                  value:
                  - folder:
                      id: 44ee029b-763e-4eb4-92dd-0b6f3c8500f2
                      date_created: '2024-02-28T02:19:25.469465Z'
                      last_updated: '2024-02-28T07:43:30.079704Z'
                      name: outlines
                      course: f040f060-315a-4a51-9954-de746f7d9180
                    materials:
                    - id: ae357d95-9d12-421f-a42e-e81239469c98
                      date_created: '2024-02-28T07:44:10.554758Z'
                      last_updated: '2024-02-28T07:44:10.554776Z'
                      title: scheme of work 2
                      file: scheme
                      type: text
                      course: f040f060-315a-4a51-9954-de746f7d9180
                      folder: 44ee029b-763e-4eb4-92dd-0b6f3c8500f2
                  summary: response
                  description: response value
          description: ''
  /v1/courses/{id}/get_course_materials:
    get:
      operationId: Get Course Materials
      description: Retrieve all materials that are attributed to a course with filters
        included
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: folder
        schema:
          type: string
        description: course folder id
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      - in: query
        name: title
        schema:
          type: string
        description: title of course material
      - in: query
        name: type
        schema:
          type: string
          enum:
          - file
          - link
          - outline
          - text
        description: type of course material (<code>file, link or text</code>)
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
  /v1/courses/{id}/open_registration:
    post:
      operationId: Open Course Registration
      description: Open a course registration
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
  /v1/courses/{id}/set_entry_code:
    post:
      operationId: Set Course Entry Code
      description: set entry code for a course
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      responses:
        '200':
          description: No response body
  /v1/courses/delete_course_material:
    post:
      operationId: Delete Course Material
      description: Deletes a Course Material or Folder
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: query
        name: folder
        schema:
          type: string
          enum:
          - 'false'
          - 'true'
        description: 'set if to delete folder: <code>?folder=true or false</code>'
      - in: query
        name: multiple
        schema:
          type: string
          enum:
          - 'false'
          - 'true'
        description: set if to delete multiple folders or materials
      - in: query
        name: pk
        schema:
          type: string
        description: course folder or material id <code>?pk=497f6eca-6276-4993-bfeb-53cbbbba6f08</code>
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCourseMaterials'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DeleteCourseMaterials'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
  /v1/courses/get_course:
    get:
      operationId: Get Course by Code
      description: get a single course using a predefined parameter
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: code
        schema:
          type: string
        description: The entry_code
        examples:
          Example:
            value: ABC123
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
  /v1/courses/student/{id}/archive:
    post:
      operationId: Archive Course
      description: Archive a course / Un-archive the course if archived
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
        required: true
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
              examples:
                Response:
                  value:
                    archived: true
                  summary: response
                  description: archived status
          description: ''
  /v1/courses/student/{id}/get_students:
    get:
      operationId: courses_student_get_students_list
      description: endpoint to get teachers of a course
      summary: Get Students of Course
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
        required: true
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseStudent'
          description: ''
  /v1/courses/student/{id}/get_teachers:
    get:
      operationId: Student Get Teachers
      description: get all teachers of a course
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
        required: true
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseTeacher'
          description: ''
  /v1/courses/student/{id}/register:
    post:
      operationId: Register for Course
      description: Register a student for a course
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
        required: true
      tags:
      - courses
      responses:
        '200':
          description: No response body
  /v1/courses/student/{id}/unenrol:
    post:
      operationId: Un-enrol Course
      description: endpoint to un-enrol a student from a course
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
        required: true
      tags:
      - courses
      responses:
        '200':
          description: No response body
  /v1/courses/student/courses:
    get:
      operationId: Get Student Courses
      description: |-
        Retrieve all courses that the authenticated student user is registered for.
        PARAMETERS
        ----------
        request : Request
            The HTTP request object containing the authenticated student user.

        RETURNS
        -------
        Response
            A Response object containing a list of courses that the student is registered for.
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
        required: true
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
  /v1/courses/student/get_eligible_courses:
    get:
      operationId: Get Eligible Courses
      description: Get all the eligible courses of a student
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: registered
        schema:
          type: boolean
          enum:
          - false
          - true
          default: false
        description: Include registered courses
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
        required: true
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
          description: ''
  /v1/courses/student/register_many:
    post:
      operationId: Register Multiple Courses
      description: |-
        endpoint to register many courses
        receives an array of course ids, and enrols for all
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: skip_check
        schema:
          type: boolean
          default: false
        description: Skip eligibility check
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CourseId'
          multipart/form-data:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CourseId'
        required: true
      responses:
        '200':
          description: No response body
  /v1/courses/student/unenrol_many:
    post:
      operationId: Un-enrol Multiple Courses
      description: endpoint to un-enrol a student from multiple courses
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CourseId'
          multipart/form-data:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CourseId'
        required: true
      responses:
        '200':
          description: No response body
  /v1/courses/student/view_archived_courses:
    get:
      operationId: View Archived Courses
      description: |-
        view all courses archived by a user
        will accept filter parameters as well
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
        required: true
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
          description: ''
  /v1/courses/teacher/{id}/accept_course:
    post:
      operationId: Accept Course Invite
      description: Endpoint to let a teacher accept a course invite (new)
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      responses:
        '200':
          description: No response body
  /v1/courses/teacher/{id}/add_student_group:
    post:
      operationId: Add Student Group
      description: this registers eligibility for a course
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudentGroup'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateStudentGroup'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentGroup'
          description: ''
  /v1/courses/teacher/{id}/add_teachers:
    post:
      operationId: Add Teachers
      description: endpoint to add a single or multiple new teacher(s) to a course
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AddTeacher'
          multipart/form-data:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/AddTeacher'
        required: true
      responses:
        '200':
          description: No response body
  /v1/courses/teacher/{id}/delete_student_group:
    delete:
      operationId: Delete Student Group
      description: this deletes the student group for a course
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: query
        name: id
        schema:
          type: string
          format: uuid
        description: The student_group id
        required: true
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      responses:
        '204':
          description: No response body
  /v1/courses/teacher/{id}/delete_teacher_request:
    delete:
      operationId: Delete Teacher Request
      description: delete an invitation sent to a teacher
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: query
        name: id
        schema:
          type: string
          format: uuid
        description: id of the teacher request
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
          description: ''
  /v1/courses/teacher/{id}/get_all_collaborators:
    get:
      operationId: courses_teacher_get_all_collaborators_retrieve
      description: |-
        Get all the collaborators in the course
        Including teachers and teacher invites
      summary: Get All Collaborators
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collaborator'
          description: ''
  /v1/courses/teacher/{id}/get_student_groups:
    get:
      operationId: Get Student Groups
      description: this fetches the student for a course
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: query
        name: id
        schema:
          type: string
          format: uuid
        description: The student_group id
        required: true
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudentGroup'
          description: ''
  /v1/courses/teacher/{id}/get_students:
    get:
      operationId: Get Students of Course
      description: |-
        Endpoint to get students of a course
        If count_only is true, only return count and nothing more
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: query
        name: count_only
        schema:
          type: boolean
          enum:
          - false
          - true
        description: return only the count
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SearchCourseStudent'
          description: ''
  /v1/courses/teacher/{id}/get_teachers:
    get:
      operationId: Get Teachers
      description: endpoint to get teachers of a course
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseTeacher'
          description: ''
  /v1/courses/teacher/{id}/remove_student:
    post:
      operationId: Remove Student from Course
      description: removes a student from a course
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: query
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
        required: true
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      responses:
        '200':
          description: No response body
  /v1/courses/teacher/{id}/remove_teacher:
    post:
      operationId: Remove Teacher from Course
      description: endpoint to remove a teacher from a course
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: query
        name: id
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
              examples:
                Response:
                  value:
                    message: teacher removed
                  summary: response
                  description: remove teacher
          description: ''
  /v1/courses/teacher/{id}/teacher_requests:
    get:
      operationId: Get Teacher Requests
      description: Get all teacher requests.
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeacherRequest'
          description: ''
  /v1/courses/teacher/{id}/update_student_group:
    put:
      operationId: Update Student Group
      description: this updates the student group for a course
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: query
        name: id
        schema:
          type: string
          format: uuid
        description: The student_group id
        required: true
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentGroup'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StudentGroup'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentGroup'
          description: ''
  /v1/courses/teacher/{id}/update_teacher:
    put:
      operationId: Update Teacher of Course
      description: endpoint to update a course teacher object
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditCourseTeacher'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EditCourseTeacher'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
              examples:
                Response:
                  value:
                    message: teacher updated
                  summary: response
                  description: teacher updated
          description: ''
  /v1/courses/teacher/courses:
    get:
      operationId: Get Courses
      description: Get all courses created by the teacher
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: query
        name: count_only
        schema:
          type: boolean
          enum:
          - false
          - true
          default: false
        description: set true if to return only count
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseWithRole'
          description: ''
  /v1/courses/teacher/create_course:
    post:
      operationId: Add Course
      description: Create a new course by teacher.
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourse'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateCourse'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
  /v1/courses/teacher/decline_invite:
    get:
      operationId: Decline Teacher Invite
      description: endpoint for a guest to decline a teacher invite
      parameters:
      - in: query
        name: pk
        schema:
          type: string
        description: id of the invite
        required: true
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
              examples:
                Response:
                  value:
                    message: successfully declined
                  summary: response
                  description: decline request
          description: ''
  /v1/courses/teacher/show_invite:
    get:
      operationId: courses_teacher_show_invite_retrieve
      description: Show an invitation to the user.
      tags:
      - courses
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
  /v1/courses/update_course_folder:
    put:
      operationId: Update Course Folder
      description: Updates a Course Folder
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: query
        name: pk
        schema:
          type: string
        description: the ID of the course folder
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCourseFolder'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateCourseFolder'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
  /v1/courses/update_course_material:
    put:
      operationId: Update Course Material
      description: Updates a Course Material
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: query
        name: pk
        schema:
          type: string
        description: the ID of the course material to update
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - courses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCourseMaterial'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateCourseMaterial'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Course'
          description: ''
  /v1/department:
    get:
      operationId: List Departments
      description: List all departments
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: faculty
        schema:
          type: string
          format: uuid
        description: The faculty id
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      - in: query
        name: school
        schema:
          type: string
          format: uuid
        description: The school id
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      tags:
      - department
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Department'
          description: ''
    post:
      operationId: Create Department
      description: Create a new department
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      tags:
      - department
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DepartmentCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentCreate'
          description: ''
  /v1/department/{id}:
    get:
      operationId: Get Department
      description: Retrieve a department by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this department.
        required: true
      tags:
      - department
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
    put:
      operationId: Update Department
      description: Update an department by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this department.
        required: true
      tags:
      - department
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DepartmentUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DepartmentUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DepartmentUpdate'
          description: ''
    patch:
      operationId: Update Department (Partial)
      description: Update a department by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this department.
        required: true
      tags:
      - department
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDepartmentUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDepartmentUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Department'
          description: ''
    delete:
      operationId: Delete Department
      description: Delete a department
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this department.
        required: true
      tags:
      - department
      responses:
        '204':
          description: No response body
  /v1/discussions:
    get:
      operationId: List Discussions
      description: List all discussions
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: author
        schema:
          type: string
          format: uuid
      - in: query
        name: course
        schema:
          type: string
          format: uuid
        examples:
          Course:
            value: 497f6eca-6276-4993-bfeb-53cbbbba6f08
            summary: course
            description: filter by course id
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: mute
        schema:
          type: boolean
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - discussions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDiscussionList'
          description: ''
    post:
      operationId: Create Discussion
      description: Create a new discussion
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - discussions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDiscussion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateDiscussion'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDiscussion'
          description: ''
  /v1/discussions/{id}:
    get:
      operationId: Retrieve Discussion
      description: Retrieve a discussion by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this discussion.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - discussions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discussion'
          description: ''
    put:
      operationId: Update Discussion
      description: Update a discussion by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this discussion.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - discussions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditDiscussion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EditDiscussion'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discussion'
          description: ''
    patch:
      operationId: Update Discussion (Partial)
      description: Update a discussion by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this discussion.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - discussions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedDiscussion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedDiscussion'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EditDiscussion'
          description: ''
    delete:
      operationId: Delete Discussion
      description: Delete a discussion
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this discussion.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - discussions
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discussion'
          description: ''
  /v1/discussions/{id}/comment:
    post:
      operationId: Comment on a Discussion
      description: Comment a discussion
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this discussion.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - discussions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentDiscussion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CommentDiscussion'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Discussion'
          description: ''
  /v1/discussions/{id}/comments:
    get:
      operationId: List Comments_2
      description: Get comments a discussion
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: author
        schema:
          type: string
          format: uuid
      - in: query
        name: course
        schema:
          type: string
          format: uuid
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this discussion.
        required: true
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: mute
        schema:
          type: boolean
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - discussions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCoreDiscussionList'
          description: ''
  /v1/discussions/{id}/thread_comments:
    get:
      operationId: discussions_thread_comments_list
      description: List all the comments under a certain comment thread
      summary: Thread comments
      parameters:
      - in: query
        name: author
        schema:
          type: string
          format: uuid
      - in: query
        name: course
        schema:
          type: string
          format: uuid
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this discussion.
        required: true
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: mute
        schema:
          type: boolean
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - discussions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCoreDiscussionList'
          description: ''
  /v1/discussions/threads:
    get:
      operationId: Get Threads
      description: Get Threads a discussion
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: author
        schema:
          type: string
          format: uuid
      - in: query
        name: course
        schema:
          type: string
          format: uuid
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - in: query
        name: mute
        schema:
          type: boolean
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - discussions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCoreDiscussionList'
          description: ''
  /v1/events:
    get:
      operationId: List Events
      description: List all events
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - events
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Event'
          description: ''
  /v1/events/delete:
    post:
      operationId: Delete User Event
      description: delete user event
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '200':
          description: No response body
  /v1/events/user:
    get:
      operationId: Get User Events
      description: Get all events related to user.
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: app_name
        schema:
          type: string
        description: the name of the app
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - events
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
              examples:
                UserEvents:
                  value:
                  - affd1d10-9538-4fc8-9e0b-4594a28c1335
                  summary: user events
                  description: List of app_ids. Add app_name in query for better context
          description: ''
  /v1/faculty:
    get:
      operationId: List Faculties
      description: List all faculties
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: expand
        schema:
          type: boolean
          enum:
          - false
          - true
        description: Option to view departments in each faculty
      - in: query
        name: school
        schema:
          type: string
          format: uuid
        description: The school id
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      tags:
      - faculty
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Faculty'
          description: ''
    post:
      operationId: Create Faculty
      description: Create a new faculty
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      tags:
      - faculty
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacultyCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FacultyCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FacultyCreate'
          description: ''
  /v1/faculty/{id}:
    get:
      operationId: Get Faculty
      description: Retrieve a faculty by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this faculty.
        required: true
      tags:
      - faculty
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Faculty'
          description: ''
    put:
      operationId: Update Faculty
      description: Update an faculty by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this faculty.
        required: true
      tags:
      - faculty
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacultyUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FacultyUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FacultyUpdate'
          description: ''
    patch:
      operationId: Update Faculty (Partial)
      description: Update a faculty by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this faculty.
        required: true
      tags:
      - faculty
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedFacultyUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedFacultyUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Faculty'
          description: ''
    delete:
      operationId: Delete Faculty
      description: Delete a faculty
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this faculty.
        required: true
      tags:
      - faculty
      responses:
        '204':
          description: No response body
  /v1/forgot_password:
    post:
      operationId: Forgot Password Request
      description: Send a password reset request
      tags:
      - forgot_password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
            examples:
              ResetPassword:
                value:
                  message: Password Reset Email Sent Successfully
                summary: reset password
                description: reset password
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          description: No response body
  /v1/grades:
    get:
      operationId: List Grades
      description: List all grades
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: query
        name: assignment
        schema:
          type: string
        description: Query parameter example
        examples:
          Assignment:
            value: abc123
            summary: assignment
      - in: query
        name: course
        schema:
          type: string
          format: uuid
      - in: query
        name: quiz
        schema:
          type: string
          format: uuid
      - in: query
        name: user
        schema:
          type: string
          format: uuid
      tags:
      - grades
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Grade'
          description: ''
    post:
      operationId: Create Grade
      description: Create a new grade
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      tags:
      - grades
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GradeCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GradeCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GradeCreate'
          description: ''
  /v1/grades/{id}:
    get:
      operationId: Get Grade
      description: Retrieve a grade by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this grade.
        required: true
      tags:
      - grades
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Grade'
          description: ''
    put:
      operationId: Update Grade
      description: Update a grade by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this grade.
        required: true
      tags:
      - grades
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GradeUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/GradeUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GradeUpdate'
          description: ''
    patch:
      operationId: Update Grade (Partial)
      description: Update a grade by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this grade.
        required: true
      tags:
      - grades
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedGradeUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedGradeUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Grade'
          description: ''
    delete:
      operationId: Delete Grade
      description: Delete a grade
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this grade.
        required: true
      tags:
      - grades
      responses:
        '204':
          description: No response body
  /v1/grades/export:
    get:
      operationId: Export Grade
      description: |-
        Exports a list of grades belonging to a course
        e.g. /grades/export?course=abc
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: query
        name: course
        schema:
          type: string
          format: uuid
        description: The course id
        required: true
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      tags:
      - grades
      responses:
        '200':
          description: No response body
  /v1/grades/student_grades:
    get:
      operationId: Get Student Grades
      description: get all the assignment and grades grouped by students
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: query
        name: assignment
        schema:
          type: boolean
          enum:
          - false
          - true
        description: Include assignment information
      - in: query
        name: course
        schema:
          type: string
          format: uuid
        description: The course id
        required: true
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      - in: query
        name: quiz
        schema:
          type: boolean
          enum:
          - false
          - true
        description: Include quiz information
      tags:
      - grades
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentGradesResponse'
          description: ''
  /v1/grades/student_grades_overview:
    get:
      operationId: Student Grade Overview
      description: endpoint to get a total overview of student grades
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: query
        name: course
        schema:
          type: string
          format: uuid
        description: The course id
        required: true
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - grades
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GradeOverview'
          description: ''
  /v1/invoice:
    get:
      operationId: List Invoices
      description: List invoices for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      tags:
      - school_invoice
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Invoice'
          description: ''
    post:
      operationId: Create Invoice
      description: Create a new invoice for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      tags:
      - school_invoice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InvoiceCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceCreate'
          description: ''
  /v1/invoice/{id}:
    get:
      operationId: Retrieve an Invoice
      description: Retrieve an invoice for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this invoice.
        required: true
      tags:
      - school_invoice
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceDetail'
          description: ''
    put:
      operationId: Update Invoice
      description: Update an invoice for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this invoice.
        required: true
      tags:
      - school_invoice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvoiceUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InvoiceUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceUpdate'
          description: ''
    patch:
      operationId: Update Invoice (Partial)
      description: Partially update an invoice for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this invoice.
        required: true
      tags:
      - school_invoice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedInvoiceUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedInvoiceUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvoiceUpdate'
          description: ''
    delete:
      operationId: Delete Invoice
      description: Delete an invoice for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this invoice.
        required: true
      tags:
      - school_invoice
      responses:
        '204':
          description: No response body
  /v1/login:
    post:
      operationId: Log in
      description: Logs in a user (student or teacher)
      tags:
      - login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileView'
          description: ''
  /v1/materials:
    get:
      operationId: materials_list
      summary: List Materials
      parameters:
      - in: query
        name: course
        schema:
          type: string
          format: uuid
      - in: query
        name: folder
        schema:
          type: string
          format: uuid
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: type
        schema:
          type: string
          enum:
          - file
          - link
          - outline
          - text
        description: |-
          * `file` - File
          * `link` - Link
          * `text` - Text
          * `outline` - Outline
      tags:
      - materials
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseMaterial'
          description: ''
    post:
      operationId: materials_create
      summary: Create Material
      tags:
      - materials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourseMaterial'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateCourseMaterial'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateCourseMaterial'
          description: ''
  /v1/materials/{id}:
    get:
      operationId: materials_retrieve
      summary: Retrieve Material
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course material.
        required: true
      tags:
      - materials
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseMaterial'
          description: ''
    put:
      operationId: materials_update
      summary: Update Material
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course material.
        required: true
      tags:
      - materials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCourseMaterial'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateCourseMaterial'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCourseMaterial'
          description: ''
    patch:
      operationId: materials_partial_update
      summary: Partially Update Material
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course material.
        required: true
      tags:
      - materials
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUpdateCourseMaterial'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUpdateCourseMaterial'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateCourseMaterial'
          description: ''
    delete:
      operationId: materials_destroy
      summary: Delete Material
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course material.
        required: true
      tags:
      - materials
      responses:
        '204':
          description: No response body
  /v1/outlines:
    get:
      operationId: List Course outlines
      description: List all the course outlines, filters included
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: query
        name: course
        schema:
          type: string
          format: uuid
        description: The course id
        required: true
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - outlines
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CourseOutline'
          description: ''
    post:
      operationId: Create Course Outline
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - outlines
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCourseOutline'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateCourseOutline'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseOutline'
          description: ''
  /v1/outlines/{id}:
    get:
      operationId: Get Course Outline
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course outline.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - outlines
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseOutline'
          description: ''
    put:
      operationId: Update Course Outline
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course outline.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - outlines
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCourseOutline'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateCourseOutline'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseOutline'
          description: ''
    delete:
      operationId: Delete Course Outline
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course outline.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - outlines
      responses:
        '204':
          description: No response body
  /v1/outlines/{id}/delete_attachment:
    post:
      operationId: Delete Outline Attachment
      description: |-
        "
        delete an attachment in an outline
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course outline.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - outlines
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseOutlineIndex'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CourseOutlineIndex'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /v1/preferences:
    get:
      operationId: Show Notification Preference
      description: show a user notification preference
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      tags:
      - user
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Preference'
          description: ''
  /v1/questions:
    get:
      operationId: List Assignment Questions
      description: List returns a list of questions with provisions for filters
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: assignment
        schema:
          type: string
          format: uuid
      - in: query
        name: course
        schema:
          type: string
          format: uuid
      - in: query
        name: id
        schema:
          type: string
          format: uuid
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - questions
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadQuestion'
          description: ''
    post:
      operationId: Create Assignment Question
      description: Create a new question
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - questions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WriteQuestion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/WriteQuestion'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadQuestion'
          description: ''
  /v1/questions/{id}:
    get:
      operationId: Retrieve Assignment Question
      description: retrieve a question
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this question.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - questions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadQuestion'
          description: ''
    put:
      operationId: Update Assignment Question
      description: Update a question
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this question.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - questions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateQuestion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateQuestion'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadQuestion'
          description: ''
    patch:
      operationId: Update Assignment Question (Partial)
      description: Update a question
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this question.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - questions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUpdateQuestion'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUpdateQuestion'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadQuestion'
          description: ''
    delete:
      operationId: Delete Assignment Question
      description: delete a question
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this question.
        required: true
      tags:
      - questions
      responses:
        '204':
          description: No response body
  /v1/questions/{id}/delete_attachment:
    post:
      operationId: Delete Question Attachment
      description: Deletes an attachment from a question
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this question.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - questions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionIndex'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionIndex'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /v1/quiz:
    get:
      operationId: List Quizzes
      description: List all quizzes
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: course
        schema:
          type: string
          format: uuid
      - in: query
        name: deadline
        schema:
          type: string
          format: date
        description: deadline of quiz, eg 2025-06-19
      - in: query
        name: status
        schema:
          type: string
          nullable: true
          enum:
          - closed
          - draft
          - published
        description: |-
          * `published` - Published
          * `closed` - Closed
          * `draft` - Draft
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - quiz
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Quiz'
          description: ''
    post:
      operationId: Create Quiz
      description: Create a new quiz
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - quiz
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuizCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuizCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizCreate'
          description: ''
  /v1/quiz/{id}:
    get:
      operationId: Retrieve Quiz
      description: Retrieve a quiz by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this quiz.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - quiz
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
          description: ''
    put:
      operationId: Update Quiz
      description: Update a quiz by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this quiz.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - quiz
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuizUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuizUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Quiz'
          description: ''
    patch:
      operationId: Update Quiz (Partial)
      description: Update a quiz by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this quiz.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - quiz
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedQuizUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedQuizUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizUpdate'
          description: ''
    delete:
      operationId: Delete Quiz
      description: Delete a quiz
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this quiz.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - quiz
      responses:
        '204':
          description: No response body
  /v1/quiz/{id}/duplicate:
    post:
      operationId: quiz_duplicate_create
      description: Duplicate a quiz
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this quiz.
        required: true
      tags:
      - quiz
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuizCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuizCreate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizCreate'
          description: ''
  /v1/quiz/{id}/publish:
    post:
      operationId: quiz_publish_create
      description: Publish a quiz
      summary: Publish a quiz
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this quiz.
        required: true
      tags:
      - quiz
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /v1/quiz/submit:
    post:
      operationId: Submit Quiz
      description: grade a quiz when student submits
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
        required: true
      tags:
      - quiz
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuizSubmit'
            examples:
              Request:
                value:
                  quiz: c8fc41b2-d41a-4a4d-b62c-5af9449f084b
                  answers:
                    ccd47479-f7c3-415f-8e2e-64f154f19c23: 0
                    e71832be-fcd8-4573-a4aa-f239efcffca6: 5
                    ab245fc9-e9cd-4ecc-bddc-84dc1cee08ba: 4
                summary: request
                description: submit request
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuizSubmit'
        required: true
      responses:
        '200':
          description: No response body
  /v1/quiz_questions:
    get:
      operationId: List Quiz Questions
      description: List all questions
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: quiz
        schema:
          type: string
          format: uuid
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - quiz_questions
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
          description: ''
    post:
      operationId: Create Quiz Question
      description: Create a new question
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - quiz_questions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionCreate'
          description: ''
  /v1/quiz_questions/{id}:
    get:
      operationId: Retrieve Quiz Question
      description: Retrieve a question by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this question.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - quiz_questions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
    put:
      operationId: Update Quiz Question
      description: Update a question by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this question.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - quiz_questions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/QuestionUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionUpdate'
          description: ''
    patch:
      operationId: Update Quiz Question (Partial)
      description: Update a question by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this question.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - quiz_questions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedQuestionUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedQuestionUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionUpdate'
          description: ''
    delete:
      operationId: Delete Quiz Question
      description: Delete a question by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this question.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - quiz_questions
      responses:
        '204':
          description: No response body
  /v1/quiz_questions/get_complete:
    get:
      operationId: Get Complete Quiz
      description: Get complete questions with answers included
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: quiz
        schema:
          type: string
          format: uuid
        description: The quiz id
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - quiz_questions
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FullQuestion'
          description: ''
  /v1/quiz_questions/save_many:
    post:
      operationId: Save Multiple Quiz Questions
      description: save many questions to database
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - quiz_questions
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/QuestionCreate'
          multipart/form-data:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/QuestionCreate'
        required: true
      responses:
        '200':
          description: No response body
  /v1/quiz_submissions:
    get:
      operationId: Get Quiz Submissions
      description: List all submissions
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: query
        name: quiz
        schema:
          type: string
          format: uuid
        description: The quiz id
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - quiz_submissions
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuizSubmission'
          description: ''
  /v1/quiz_submissions/{id}:
    get:
      operationId: Retrieve Quiz Submissions
      description: Retrieve single submissions
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this submission.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - quiz_submissions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizSubmission'
          description: ''
    delete:
      operationId: Delete Quiz Submission
      description: Delete a submission by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this submission.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - quiz_submissions
      responses:
        '204':
          description: No response body
  /v1/quiz_submissions/get_all_submissions:
    get:
      operationId: Get All Student Submissions
      description: |-
        get all:
         - quizzes
         - submissions
         - grades
         for a given student
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: query
        name: course
        schema:
          type: string
          format: uuid
        description: The course id
        required: true
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      - in: query
        name: quiz
        schema:
          type: string
          format: uuid
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
        required: true
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - quiz_submissions
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AllStudentSubmissions'
          description: ''
  /v1/quiz_submissions/submissions:
    get:
      operationId: Get Student Submissions
      description: |-
        Get all student submissions for a given quiz.
        Also returns null for students with no submission
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: query
        name: course
        schema:
          type: string
          format: uuid
        description: The course id
        required: true
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - quiz_submissions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizStudentSubmission'
          description: ''
  /v1/read_reciepts:
    get:
      operationId: List Read Receipts
      description: List all receipts
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      tags:
      - read_reciepts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReadReciept'
          description: ''
    post:
      operationId: Create Read Receipt
      description: Create read receipts
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      tags:
      - read_reciepts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadReciept'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReadReciept'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadReciept'
          description: ''
  /v1/read_reciepts/{id}:
    get:
      operationId: Retrieve Read Receipt
      description: Retrieve read receipt
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this read reciept.
        required: true
      tags:
      - read_reciepts
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadReciept'
          description: ''
    put:
      operationId: Update Read Receipt
      description: Update a read receipt
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this read reciept.
        required: true
      tags:
      - read_reciepts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReadReciept'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ReadReciept'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadReciept'
          description: ''
    delete:
      operationId: Delete Read Receipt
      description: Delete a read receipt
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this read reciept.
        required: true
      tags:
      - read_reciepts
      security:
      - {}
      responses:
        '204':
          description: No response body
  /v1/read_reciepts/mark_as_read:
    post:
      operationId: Mark Read Receipt as read
      description: Mark a read receipt as read
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      tags:
      - read_reciepts
      security:
      - {}
      responses:
        '200':
          description: No response body
  /v1/request_otp:
    post:
      operationId: Send OTP
      description: Send otp to the target
      tags:
      - otp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OtpRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/OtpRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OtpRequest'
              examples:
                SendOTP:
                  value:
                    message: otp sent
                  description: Send otp to the target
          description: ''
  /v1/school_grade:
    get:
      operationId: List School Grades
      description: List all grades
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      tags:
      - school_grade
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchoolGrade'
          description: ''
    post:
      operationId: Create School Grade
      description: Create a new grade
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      tags:
      - school_grade
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchoolGradeCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SchoolGradeCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolGradeCreate'
          description: ''
  /v1/school_grade/{id}:
    get:
      operationId: Retrieve School Grade
      description: Retrieve a grade by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this grade.
        required: true
      tags:
      - school_grade
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolGrade'
          description: ''
    put:
      operationId: Update School Grade
      description: Update a grade by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this grade.
        required: true
      tags:
      - school_grade
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchoolGradeUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SchoolGradeUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolGradeUpdate'
          description: ''
    patch:
      operationId: Update School Grade (Partial)
      description: Update a grade by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this grade.
        required: true
      tags:
      - school_grade
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSchoolGradeUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSchoolGradeUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolGrade'
          description: ''
    delete:
      operationId: Delete School Grade
      description: Delete a grade
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this grade.
        required: true
      tags:
      - school_grade
      responses:
        '204':
          description: No response body
  /v1/schools:
    get:
      operationId: List Schools
      description: List all schools
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - schools
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedSchoolList'
          description: ''
    post:
      operationId: Create School
      description: Create a new school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      tags:
      - schools
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchoolCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SchoolCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolCreate'
          description: ''
  /v1/schools/{id}:
    get:
      operationId: Get School
      description: Retrieve a school by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this School.
        required: true
      tags:
      - schools
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'
          description: ''
    put:
      operationId: Update School
      description: Update a school by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this School.
        required: true
      tags:
      - schools
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchoolUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SchoolUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolUpdate'
          description: ''
    patch:
      operationId: Update School (Partial)
      description: Update a school by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this School.
        required: true
      tags:
      - schools
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSchool'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSchool'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'
          description: ''
    delete:
      operationId: Delete School (Partial)
      description: Delete a school by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this School.
        required: true
      tags:
      - schools
      responses:
        '204':
          description: No response body
  /v1/schools/{id}/complete:
    get:
      operationId: Get Complete School
      description: Get complete details of a school.
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this School.
        required: true
      tags:
      - schools
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FacultyDepartment'
          description: ''
  /v1/schools/{id}/levels:
    get:
      operationId: Get Levels of School
      description: Get all the levels of a school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this School.
        required: true
      tags:
      - schools
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/School'
              examples:
                LevelsResponse:
                  value:
                  - 100
                  - 200
                  - 300
                  - 400
                  - 500
                  summary: levels response
          description: ''
  /v1/schools/admin:
    get:
      operationId: List School Admins
      description: List all admins in the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      tags:
      - school_admin
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchoolAdmin'
          description: ''
    post:
      operationId: Create School Admin
      description: Create a new school admin
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      tags:
      - school_admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSchoolAdmin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateSchoolAdmin'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSchoolAdmin'
          description: ''
  /v1/schools/admin/{id}:
    get:
      operationId: Get School Admin
      description: Get a school admin
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this school admin.
        required: true
      tags:
      - school_admin
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolAdminDetail'
          description: ''
    put:
      operationId: Update School Admin
      description: Updates a school admin
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this school admin.
        required: true
      tags:
      - school_admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSchoolAdmin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateSchoolAdmin'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateSchoolAdmin'
          description: ''
    delete:
      operationId: Delete School Admin
      description: Delete a school admin
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this school admin.
        required: true
      tags:
      - school_admin
      responses:
        '204':
          description: No response body
  /v1/schools/admin/{id}/accept:
    post:
      operationId: Accept an invite
      description: Allows the admin to accept an invite into the platform
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this school admin.
        required: true
      tags:
      - school_admin
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /v1/schools/admin/{id}/cancel_invite:
    post:
      operationId: schools_admin_cancel_invite_create
      description: Cancel an admin invite
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this school admin.
        required: true
      tags:
      - schools
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchoolAdmin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SchoolAdmin'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SchoolAdmin'
          description: ''
  /v1/schools/admin/{id}/decline:
    post:
      operationId: Declines an invite
      description: Allows the admin to decline an invite into the platform
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this school admin.
        required: true
      tags:
      - school_admin
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /v1/schools/admin/delete_school:
    post:
      operationId: Delete School
      description: Allows the school owner to delete the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      tags:
      - school_admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties: {}
            examples:
              DeleteSchoolExample:
                value:
                  token: your_otp_token_here
                summary: Delete School Example
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /v1/schools/admin/invite:
    post:
      operationId: Invite an Admin
      description: Invite an admin into the platform
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      tags:
      - school_admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteAdmin'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InviteAdmin'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /v1/schools/admin/transfer_ownership:
    post:
      operationId: Transfer School Ownership
      description: Allows the school owner to transfer the ownership
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      tags:
      - school_admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SchoolOwnership'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SchoolOwnership'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /v1/schools/profiles:
    get:
      operationId: schools_profiles_list
      description: Get all schools attached to your profile
      summary: School Profiles
      tags:
      - schools
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SchoolAdminDetail'
          description: ''
  /v1/schools/settings/directory:
    get:
      operationId: List Directory Settings
      description: List directory settings for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      tags:
      - school_settings
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedDirectorySettingsList'
          description: ''
    post:
      operationId: Create Directory Setting
      description: Create a new settings for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      tags:
      - school_settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDirectorySettings'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateDirectorySettings'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateDirectorySettings'
          description: ''
  /v1/schools/settings/directory/{id}:
    get:
      operationId: Retrieve a Directory Setting
      description: Get a directory settings for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this directory setting.
        required: true
      tags:
      - school_settings
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DirectorySettings'
          description: ''
    put:
      operationId: Update Directory Setting
      description: Update a setting for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this directory setting.
        required: true
      tags:
      - school_settings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDirectorySettings'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateDirectorySettings'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDirectorySettings'
          description: ''
  /v1/schools/student:
    get:
      operationId: List students
      description: List students in the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: query
        name: arm
        schema:
          type: string
      - in: query
        name: class_number
        schema:
          type: string
      - in: query
        name: department
        schema:
          type: string
          format: uuid
      - in: query
        name: faculty
        schema:
          type: string
          format: uuid
      - in: query
        name: grade
        schema:
          type: string
          format: uuid
      - in: query
        name: level
        schema:
          type: string
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: status
        schema:
          type: string
          enum:
          - active
          - self_enrolled
        description: |-
          * `active` - Active
          * `self_enrolled` - Self Enrolled
      tags:
      - school_student
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedStudentList'
          description: ''
  /v1/schools/student/{id}:
    get:
      operationId: Get a student
      description: Get the details of a student
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this student profile.
        required: true
      tags:
      - school_student
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
          description: ''
    put:
      operationId: Update Student (School)
      description: Update a student in the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this student profile.
        required: true
      tags:
      - school_student
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStudentProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateStudentProfile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateStudentProfile'
          description: ''
    patch:
      operationId: Update Student School (Partial)
      description: Update a student in the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this student profile.
        required: true
      tags:
      - school_student
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUpdateStudentProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUpdateStudentProfile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateStudentProfile'
          description: ''
    delete:
      operationId: Delete Student (School)
      description: Delete a student in the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this student profile.
        required: true
      tags:
      - school_student
      responses:
        '204':
          description: No response body
  /v1/schools/student/{id}/approve:
    post:
      operationId: Approve School Student
      description: Approve a school student profile
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this student profile.
        required: true
      tags:
      - school_student
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StudentProfile'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /v1/schools/student/{id}/courses:
    get:
      operationId: School Student Courses
      description: View student courses
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this student profile.
        required: true
      tags:
      - school_student
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseStudent'
          description: ''
  /v1/schools/student/{id}/decline:
    post:
      operationId: Decline School Student
      description: Decline a school student profile
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this student profile.
        required: true
      tags:
      - school_student
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StudentProfile'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /v1/schools/student/invite:
    post:
      operationId: Invite School Student
      description: Invite a student to a school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      tags:
      - school_student
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InviteStudent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/InviteStudent'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /v1/schools/student/upload:
    post:
      operationId: Upload Students
      description: send invite to multiple students
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      tags:
      - school_student
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadStudent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadStudent'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /v1/schools/teacher:
    get:
      operationId: schools_teacher_list
      description: List all teachers in the school
      summary: List teachers
      parameters:
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - in: query
        name: school
        schema:
          type: string
          format: uuid
      - in: query
        name: title
        schema:
          type: string
      tags:
      - schools
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTeacherProfileList'
          description: ''
  /v1/schools/teacher/{id}:
    get:
      operationId: schools_teacher_retrieve
      description: Get a teacher in the school
      summary: Get a teacher
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this teacher profile.
        required: true
      tags:
      - schools
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherProfile'
          description: ''
    put:
      operationId: schools_teacher_update
      summary: Update a teacher
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this teacher profile.
        required: true
      tags:
      - schools
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTeacherProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateTeacherProfile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTeacherProfile'
          description: ''
    patch:
      operationId: schools_teacher_partial_update
      summary: Partially update a teacher
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this teacher profile.
        required: true
      tags:
      - schools
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUpdateTeacherProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUpdateTeacherProfile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateTeacherProfile'
          description: ''
    delete:
      operationId: schools_teacher_destroy
      summary: Delete a teacher
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this teacher profile.
        required: true
      tags:
      - schools
      responses:
        '204':
          description: No response body
  /v1/schools/teacher/{id}/courses:
    get:
      operationId: schools_teacher_courses_retrieve
      description: View courses taught by the teacher
      summary: Get courses by teacher
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this teacher profile.
        required: true
      tags:
      - schools
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CourseWithRole'
          description: ''
  /v1/search:
    get:
      operationId: Search
      description: |-
        Global Search endpoint

        `s` refers to the search term
        `target` refers to the search target, could be `all` or any of the sub searches
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: optimize
        schema:
          type: boolean
          enum:
          - false
          - true
        description: optimize the query (multithreading)
      - in: query
        name: s
        schema:
          type: string
        description: the search term
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: query
        name: target
        schema:
          type: string
          enum:
          - all
          - announcements
          - assignment
          - course
          - discussions
          - files
          - outlines
          - quiz
          - students
          - teachers
        description: the target term
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - search
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Search'
          description: ''
  /v1/signup/student:
    post:
      operationId: Register Student
      description: Register a new user
      tags:
      - signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterUser'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /v1/signup/teacher:
    post:
      operationId: Register Teacher
      description: Register a new teacher
      tags:
      - signup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterTeacher'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RegisterTeacher'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /v1/sms_messages:
    get:
      operationId: List SMS Messages
      description: List all messages
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      tags:
      - sms_messages
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SMSMessage'
          description: ''
    post:
      operationId: Create SMS Message
      description: Create sms message
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      tags:
      - sms_messages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SMSMessage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SMSMessage'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SMSMessage'
          description: ''
  /v1/sms_messages/{id}:
    get:
      operationId: Retrieve SMS Message
      description: Retrieve sms message
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this sms message.
        required: true
      tags:
      - sms_messages
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SMSMessage'
          description: ''
    put:
      operationId: Update SMS Message
      description: Update a SMS Message
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this sms message.
        required: true
      tags:
      - sms_messages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SMSMessage'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SMSMessage'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SMSMessage'
          description: ''
    delete:
      operationId: Delete SMS Message
      description: Delete a SMS Message
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
        description: A unique value identifying this sms message.
        required: true
      tags:
      - sms_messages
      responses:
        '204':
          description: No response body
  /v1/student_courses:
    get:
      operationId: student_courses_list
      description: Show courses a student is offering
      summary: Show Student Courses
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: student
        schema:
          type: string
        description: student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - student_courses
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /v1/student_invite:
    get:
      operationId: student_invite_list
      description: Retrieve a list of student invites for the authenticated user.
      summary: List invites
      parameters:
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: query
        name: arm
        schema:
          type: string
      - in: query
        name: class_number
        schema:
          type: string
      - in: query
        name: department
        schema:
          type: string
          format: uuid
      - in: query
        name: faculty
        schema:
          type: string
          format: uuid
      - in: query
        name: level
        schema:
          type: string
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: section
        schema:
          type: string
      - in: query
        name: state
        schema:
          type: string
          nullable: true
          enum:
          - ACCEPTED
          - DECLINED
          - PENDING
        description: |-
          * `PENDING` - Pending
          * `ACCEPTED` - Accepted
          * `DECLINED` - Declined
      tags:
      - student_invite
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedStudentInviteList'
          description: ''
    post:
      operationId: student_invite_create
      description: Create a new student invite.
      summary: Create invite
      parameters:
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      tags:
      - student_invite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentInviteCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StudentInviteCreate'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentInviteCreate'
          description: ''
  /v1/student_invite/{id}:
    get:
      operationId: student_invite_retrieve
      description: Retrieve a specific student invite.
      summary: Get invite
      parameters:
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this student invite.
        required: true
      tags:
      - student_invite
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentInviteDetail'
          description: ''
    put:
      operationId: student_invite_update
      description: Update an existing student invite.
      summary: Update invite
      parameters:
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this student invite.
        required: true
      tags:
      - student_invite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StudentInviteUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/StudentInviteUpdate'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentInviteUpdate'
          description: ''
    patch:
      operationId: student_invite_partial_update
      description: Partially update a student invite.
      summary: Partial update
      parameters:
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this student invite.
        required: true
      tags:
      - student_invite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedStudentInvite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedStudentInvite'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentInvite'
          description: ''
    delete:
      operationId: student_invite_destroy
      description: Delete a student invite.
      summary: Delete invite
      parameters:
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this student invite.
        required: true
      tags:
      - student_invite
      security:
      - {}
      responses:
        '204':
          description: No response body
  /v1/student_invite/upload:
    post:
      operationId: student_invite_upload_create
      description: Upload a CSV of student data
      summary: Import Students
      parameters:
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      tags:
      - student_invite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadStudent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadStudent'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /v1/sub_folder/{id}/course_materials_and_sub_folders:
    get:
      operationId: Get Sub Folder and Materials
      description: Retrieve all sub_folders and materials that are attributed to a
        folder
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this course folder.
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - sub_folder
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FoldersAndMaterials'
          description: ''
  /v1/submissions:
    get:
      operationId: List Assignment Submissions
      description: View all submissions
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: assignment
        schema:
          type: string
          format: uuid
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: student
        schema:
          type: string
          format: uuid
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      tags:
      - submissions
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssignmentSubmission'
          description: ''
    post:
      operationId: Create Assignment Submission
      description: create a new submission
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - submissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSubmission'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateSubmission'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignmentSubmission'
          description: ''
  /v1/submissions/{id}:
    get:
      operationId: Retrieve Assignment Submission
      description: retrieve a submission by id
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this submission.
        required: true
      tags:
      - submissions
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignmentSubmission'
          description: ''
    put:
      operationId: Update Assignment Submission
      description: Update a submission
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this submission.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - submissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssignmentUpdateSubmission'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/AssignmentUpdateSubmission'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AssignmentSubmission'
          description: ''
    delete:
      operationId: Delete Assignment Submission
      description: delete a submission
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this submission.
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - submissions
      responses:
        '204':
          description: No response body
  /v1/submissions/get_all_submissions:
    get:
      operationId: Get All Student Submissions_2
      description: |-
        get all:
         - assignments
         - submissions
         - grades
         for a given student
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: query
        name: assignment
        schema:
          type: string
          format: uuid
      - in: query
        name: course
        schema:
          type: string
          format: uuid
        description: The course id
        required: true
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
        required: true
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - submissions
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AssignmentStudentSubmissions'
          description: ''
  /v1/submissions/get_assignment_submissions:
    get:
      operationId: Get Student Assignment Submissions
      description: Get all submissions for an assigment
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: query
        name: assignment
        schema:
          type: string
          format: uuid
        description: The assignment id
        required: true
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: student
        schema:
          type: string
          format: uuid
      tags:
      - submissions
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudentSubmission'
          description: ''
  /v1/subscriptions:
    get:
      operationId: List Subscriptions
      description: List subscriptions for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      tags:
      - school_subscription
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subscription'
          description: ''
    post:
      operationId: Create Subscription
      description: Create a new subscription for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      tags:
      - school_subscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubscriptionCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionCreate'
          description: ''
  /v1/subscriptions/{id}:
    get:
      operationId: Retrieve Subscription
      description: Retrieve a subscription for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this subscription.
        required: true
      tags:
      - school_subscription
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionDetail'
          description: ''
    put:
      operationId: Update Subscription
      description: Update a subscription for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this subscription.
        required: true
      tags:
      - school_subscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/SubscriptionUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionUpdate'
          description: ''
    patch:
      operationId: Update Subscription (Partial)
      description: Partially update a subscription for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this subscription.
        required: true
      tags:
      - school_subscription
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedSubscriptionUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedSubscriptionUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionUpdate'
          description: ''
    delete:
      operationId: Delete Subscription
      description: Delete a subscription for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this subscription.
        required: true
      tags:
      - school_subscription
      responses:
        '204':
          description: No response body
  /v1/sync/load:
    get:
      operationId: load
      description: load and dump data
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - sync
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Load'
          description: ''
  /v1/sync/update:
    get:
      operationId: sync_update_retrieve
      description: update a client dump
      tags:
      - sync
      responses:
        '200':
          description: No response body
  /v1/teacher_courses:
    get:
      operationId: teacher_courses_list
      description: Show courses a teacher is teaching
      summary: Show Teacher Courses
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: teacher
        schema:
          type: string
        description: teacher id
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
      tags:
      - teacher_courses
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Course'
          description: ''
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /v1/teacher_invite:
    get:
      operationId: teacher_invite_list
      description: Retrieve a list of teacher invites for the authenticated user.
      summary: List invites
      parameters:
      - in: query
        name: department
        schema:
          type: string
          format: uuid
      - in: query
        name: faculty
        schema:
          type: string
          format: uuid
      - name: limit
        required: false
        in: query
        description: Number of results to return per page.
        schema:
          type: integer
      - name: offset
        required: false
        in: query
        description: The initial index from which to return the results.
        schema:
          type: integer
      - name: search
        required: false
        in: query
        description: A search term.
        schema:
          type: string
      - in: query
        name: state
        schema:
          type: string
          nullable: true
          enum:
          - ACCEPTED
          - DECLINED
          - PENDING
        description: |-
          * `PENDING` - Pending
          * `ACCEPTED` - Accepted
          * `DECLINED` - Declined
      tags:
      - teacher_invite
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedTeacherInviteList'
          description: ''
    post:
      operationId: teacher_invite_create
      description: Create a new teacher invite.
      summary: Create invite
      tags:
      - teacher_invite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeacherInviteCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TeacherInviteCreate'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherInviteCreate'
          description: ''
  /v1/teacher_invite/{id}:
    get:
      operationId: teacher_invite_retrieve
      description: Retrieve a specific teacher invite.
      summary: Get invite
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this teacher invite.
        required: true
      tags:
      - teacher_invite
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherInviteDetail'
          description: ''
    put:
      operationId: teacher_invite_update
      description: Update an existing teacher invite.
      summary: Update invite
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this teacher invite.
        required: true
      tags:
      - teacher_invite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeacherInviteUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TeacherInviteUpdate'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherInviteUpdate'
          description: ''
    patch:
      operationId: teacher_invite_partial_update
      description: Partially update a teacher invite.
      summary: Partial update
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this teacher invite.
        required: true
      tags:
      - teacher_invite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTeacherInvite'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTeacherInvite'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherInvite'
          description: ''
    delete:
      operationId: teacher_invite_destroy
      description: Delete a teacher invite.
      summary: Delete invite
      parameters:
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this teacher invite.
        required: true
      tags:
      - teacher_invite
      security:
      - {}
      responses:
        '204':
          description: No response body
  /v1/teacher_invite/upload:
    post:
      operationId: teacher_invite_upload_create
      description: Upload a CSV of teacher data
      summary: Import Teachers
      tags:
      - teacher_invite
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadStudent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UploadStudent'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /v1/transactions:
    get:
      operationId: List Transactions
      description: List transactions for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      tags:
      - school_transaction
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Transaction'
          description: ''
    post:
      operationId: Create Transaction
      description: Create a new transaction for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      tags:
      - school_transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionCreate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TransactionCreate'
        required: true
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionCreate'
          description: ''
  /v1/transactions/{id}:
    get:
      operationId: Retrieve Transaction
      description: Retrieve a transaction for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this transaction.
        required: true
      tags:
      - school_transaction
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionDetail'
          description: ''
    put:
      operationId: Update Transaction
      description: Update a transaction for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this transaction.
        required: true
      tags:
      - school_transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TransactionUpdate'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionUpdate'
          description: ''
    patch:
      operationId: Update Transaction (Partial)
      description: Partially update a transaction for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this transaction.
        required: true
      tags:
      - school_transaction
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTransactionUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTransactionUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionUpdate'
          description: ''
    delete:
      operationId: Delete Transaction
      description: Delete a transaction for the school
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: header
        name: admin
        schema:
          type: string
          format: uuid
        description: The admin id
        required: true
      - in: path
        name: id
        schema:
          type: string
          format: uuid
        description: A UUID string identifying this transaction.
        required: true
      tags:
      - school_transaction
      responses:
        '204':
          description: No response body
  /v1/update_preference:
    post:
      operationId: Update Notification Preference
      description: update a user notification preference
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PreferenceUpdate'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PreferenceUpdate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Preference'
          description: ''
  /v1/user/accept_invite:
    get:
      operationId: user_accept_invite_retrieve
      description: |-
        Accept a teacher invite.
            - Create a new teacher profile if necessary
      summary: accept teacher invite
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: invite
        schema:
          type: string
          format: uuid
        description: The invite id
        required: true
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      tags:
      - user
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /v1/user/check_email:
    post:
      operationId: Check Email
      description: Endpoint to check if email belongs to a verified user
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
            examples:
              EmailCheck:
                value:
                  exist: true
                summary: email_check
                description: check email response
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserRegister'
        required: true
      security:
      - {}
      responses:
        '200':
          description: No response body
  /v1/user/check_password:
    post:
      operationId: user_check_password_create
      description: Check user password
      summary: Check Password
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /v1/user/decline_invite:
    get:
      operationId: user_decline_invite_retrieve
      summary: decline teacher invite
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: query
        name: invite
        schema:
          type: string
          format: uuid
        description: The invite id
        required: true
        examples:
          Example:
            value: 479e205a-94ef-40c2-941b-bad89871ce1f
      tags:
      - user
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /v1/user/delete:
    get:
      operationId: Delete User
      description: Delete a user
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      tags:
      - user
      security:
      - {}
      responses:
        '200':
          description: No response body
  /v1/user/delete_account:
    post:
      operationId: user_delete_account_create
      description: delete the authenticated user account
      summary: Delete user account
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      tags:
      - user
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /v1/user/reset_password:
    post:
      operationId: Reset Password
      description: Reset a user password
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePassword'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdatePassword'
        required: true
      security:
      - {}
      responses:
        '200':
          description: No response body
  /v1/user/school_profile:
    post:
      operationId: Add Student Profile
      description: Adds a student profile
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateStudentProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateStudentProfile'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentProfile'
          description: ''
  /v1/user/school_profile/{id}:
    get:
      operationId: Get Student Profile
      description: get student profile (uni or k-12)
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - user
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentProfile'
          description: ''
  /v1/user/school_profile/delete:
    post:
      operationId: user_school_profile_delete_create
      description: delete a student profile
      summary: Delete student profile
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: header
        name: student
        schema:
          type: string
          format: uuid
        description: The student id
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteStudentProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/DeleteStudentProfile'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
        '500':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: ''
  /v1/user/school_profile/update/{id}:
    put:
      operationId: Update Student Profile
      description: Update a student profile
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateStudentProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateStudentProfile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StudentProfile'
          description: ''
  /v1/user/school_profiles:
    get:
      operationId: Get School Profiles
      description: Gets all school profiles for a user
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      tags:
      - user
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StudentProfile'
          description: ''
  /v1/user/show_invitation:
    get:
      operationId: user_show_invitation_list
      description: Show an invitation to the user.
      summary: Show user invitations
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      tags:
      - user
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeacherRequestSerializerDetail'
          description: ''
  /v1/user/teacher_profile:
    post:
      operationId: Add Teacher Profile
      description: Adds a teacher profile
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeacherProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/CreateTeacherProfile'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherProfile'
          description: ''
  /v1/user/teacher_profile/delete:
    delete:
      operationId: user_teacher_profile_delete_destroy
      description: Delete a teacher profile.
      summary: delete teacher profile
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      - in: header
        name: teacher
        schema:
          type: string
          format: uuid
        description: The teacher id
        required: true
      tags:
      - user
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /v1/user/teacher_profile/update/{id}:
    put:
      operationId: Update Teacher Profile
      description: Update a teacher profile
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTeacherProfile'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateTeacherProfile'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeacherProfile'
          description: ''
  /v1/user/teacher_profiles:
    get:
      operationId: Get Teacher Profiles
      description: Get teacher profiles
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>teacher</b>
        required: true
      tags:
      - user
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TeacherProfile'
          description: ''
  /v1/user/update_email:
    post:
      operationId: Update Email
      description: Update user email
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
          description: ''
  /v1/user/update_password:
    post:
      operationId: Update Password
      description: Update the password of an authenticated user
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Password'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Password'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Password'
              examples:
                Password:
                  value:
                    success: true
                  summary: password
                  description: password
          description: ''
  /v1/user/update_phone:
    post:
      operationId: user_update_phone_create
      description: |-
        Reset a password
        Accept password information and update record
      tags:
      - user
      responses:
        '200':
          description: No response body
  /v1/user/update_user:
    post:
      operationId: Update User
      description: Update user information
      parameters:
      - in: header
        name: Authorization
        schema:
          type: string
        description: Token used to authenticate <b>user</b>
        required: true
      tags:
      - user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProfileView'
          description: ''
  /v1/validate_otp:
    post:
      operationId: Validate OTP
      description: Validate otp from the target
      tags:
      - otp
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidateOTP'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ValidateOTP'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidateOTP'
              examples:
                SendOTP:
                  value:
                    status: successful
                  description: Send otp to the target
          description: ''
components:
  schemas:
    Activity:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        discussion:
          allOf:
          - $ref: '#/components/schemas/SearchDiscussion'
          readOnly: true
        assignment:
          allOf:
          - $ref: '#/components/schemas/Assignment'
          readOnly: true
        quiz:
          $ref: '#/components/schemas/Quiz'
        announcement:
          $ref: '#/components/schemas/ReadAnnouncement'
        creator:
          allOf:
          - $ref: '#/components/schemas/Author'
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        type:
          $ref: '#/components/schemas/Type847Enum'
        data: {}
        course:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - announcement
      - assignment
      - course
      - creator
      - data
      - date_created
      - discussion
      - id
      - last_updated
      - quiz
      - school
      - type
    AddTeacher:
      type: object
      description: Serializer to add a teacher by email
      properties:
        email:
          type: string
        role:
          type: string
      required:
      - email
      - role
    AllStudentSubmissions:
      type: object
      properties:
        quiz:
          $ref: '#/components/schemas/Quiz'
        submission:
          $ref: '#/components/schemas/QuizSubmission'
        grade:
          $ref: '#/components/schemas/Grade'
      required:
      - grade
      - quiz
      - submission
    Assignment:
      type: object
      description: |-
        Serializer for the Assignment model.

        The AssignmentSerializer class provides serialization and deserialization
        functionality for the Assignment model, converting between its instances
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_by:
          allOf:
          - $ref: '#/components/schemas/CreatedBy'
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 255
        submission_method:
          oneOf:
          - $ref: '#/components/schemas/SubmissionMethodEnum'
          - $ref: '#/components/schemas/BlankEnum'
        start_date:
          type: string
          format: date-time
          nullable: true
        deadline:
          type: string
          format: date-time
          nullable: true
        marks:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Status072Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        accept_late:
          type: boolean
          nullable: true
        submission_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/SubmissionTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        submission_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        graded:
          type: boolean
          nullable: true
        course:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - course
      - created_by
      - date_created
      - id
      - last_updated
      - school
    AssignmentResetSubmission:
      type: object
      properties:
        submission_id:
          type: string
      required:
      - submission_id
    AssignmentStudentSubmissions:
      type: object
      properties:
        assignment:
          $ref: '#/components/schemas/Assignment'
        submission:
          $ref: '#/components/schemas/Submission'
        grade:
          $ref: '#/components/schemas/Grade'
      required:
      - assignment
      - grade
      - submission
    AssignmentSubmission:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        grade:
          $ref: '#/components/schemas/Grade'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        text:
          type: array
          items:
            type: string
          nullable: true
        files:
          type: array
          items: {}
          nullable: true
        notes:
          type: string
        student_feedback:
          type: string
        teacher_feedback:
          type: string
        is_graded:
          type: boolean
        status:
          type: string
          nullable: true
          maxLength: 200
        student:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        assignment:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - assignment
      - date_created
      - grade
      - id
      - last_updated
      - school
      - student
    AssignmentUpdateSubmission:
      type: object
      description: |-
        Serializer for the Submission model.

        The SubmissionSerializer class provides serialization and deserialization
        functionality for the Submission model, converting between its instances
        and JSON.
      properties:
        files:
          type: array
          items: {}
          nullable: true
        is_graded:
          type: boolean
        text:
          type: array
          items:
            type: string
          nullable: true
        notes:
          type: string
    Author:
      type: object
      description: schema for defining the author structure of a discussion object
      properties:
        fullname:
          type: string
          maxLength: 300
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
          maxLength: 300
        image:
          type: string
          maxLength: 300
      required:
      - email
      - fullname
      - id
      - image
    Billing:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        fullname:
          type: string
          nullable: true
          maxLength: 200
        number:
          type: string
          nullable: true
          maxLength: 200
        expiry_date:
          type: string
          nullable: true
        cvv:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        address:
          type: string
          nullable: true
          maxLength: 200
        designation:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/DesignationEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        tokenized:
          type: string
          nullable: true
          maxLength: 200
        card_type:
          type: string
          nullable: true
        school:
          type: string
          format: uuid
      required:
      - date_created
      - id
      - last_updated
      - school
    BillingCreate:
      type: object
      properties:
        fullname:
          type: string
          nullable: true
          maxLength: 200
        number:
          type: string
          nullable: true
          maxLength: 200
        expiry_date:
          type: string
          nullable: true
        cvv:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        address:
          type: string
          nullable: true
          maxLength: 200
        school:
          type: string
          format: uuid
        designation:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/DesignationEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
      required:
      - school
    BillingDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        school:
          $ref: '#/components/schemas/School'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        fullname:
          type: string
          nullable: true
          maxLength: 200
        number:
          type: string
          nullable: true
          maxLength: 200
        expiry_date:
          type: string
          nullable: true
        cvv:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        address:
          type: string
          nullable: true
          maxLength: 200
        designation:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/DesignationEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        tokenized:
          type: string
          nullable: true
          maxLength: 200
        card_type:
          type: string
          nullable: true
      required:
      - date_created
      - id
      - last_updated
      - school
    BillingUpdate:
      type: object
      properties:
        fullname:
          type: string
          nullable: true
          maxLength: 200
        number:
          type: string
          nullable: true
          maxLength: 200
        expiry_date:
          type: string
          nullable: true
        cvv:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        address:
          type: string
          nullable: true
          maxLength: 200
    BlankEnum:
      enum:
      - ''
    CSStudent:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        matric:
          type: string
          nullable: true
          maxLength: 50
        user:
          allOf:
          - $ref: '#/components/schemas/CSUser'
          readOnly: true
      required:
      - id
      - user
    CSUser:
      type: object
      description: CourseStudent User Serializer class
      properties:
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        fullname:
          type: string
          nullable: true
          maxLength: 500
        image:
          type: string
          format: uri
          nullable: true
          maxLength: 200
    CalendarActivity:
      type: object
      description: Serializer for Activity model
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        course:
          allOf:
          - $ref: '#/components/schemas/CalendarCourse'
          readOnly: true
        quiz:
          $ref: '#/components/schemas/Quiz'
        assignment:
          allOf:
          - $ref: '#/components/schemas/Assignment'
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        type:
          $ref: '#/components/schemas/Type706Enum'
        title:
          type: string
          maxLength: 255
        start_time:
          type: string
          format: date-time
          nullable: true
        end_time:
          type: string
          format: date-time
          nullable: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - assignment
      - course
      - date_created
      - id
      - last_updated
      - quiz
      - school
      - title
      - type
    CalendarActivityCreate:
      type: object
      description: Serializer for creating an Activity object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        type:
          $ref: '#/components/schemas/Type706Enum'
        title:
          type: string
          maxLength: 255
        start_time:
          type: string
          format: date-time
          nullable: true
        end_time:
          type: string
          format: date-time
          nullable: true
        course:
          type: string
          format: uuid
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - course
      - id
      - title
      - type
    CalendarActivityUpdate:
      type: object
      description: Serializer for updating activity information.
      properties:
        type:
          $ref: '#/components/schemas/Type706Enum'
        title:
          type: string
          maxLength: 255
        start_time:
          type: string
          format: date-time
          nullable: true
        end_time:
          type: string
          format: date-time
          nullable: true
      required:
      - title
      - type
    CalendarCourse:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        course_code:
          type: string
      required:
      - course_code
      - id
      - title
    Collaborator:
      type: object
      properties:
        teachers:
          type: array
          items:
            $ref: '#/components/schemas/CourseTeacher'
        invites:
          type: array
          items:
            $ref: '#/components/schemas/TeacherRequest'
      required:
      - invites
      - teachers
    Comment:
      type: object
      description: Serializer for a Comment Model
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/GradeUser'
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        text:
          type: string
        grade:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        question:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        assignment:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - assignment
      - date_created
      - grade
      - id
      - last_updated
      - question
      - school
      - text
      - user
    CommentCreate:
      type: object
      description: Serializer for creating a Comment object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        text:
          type: string
        user:
          type: string
          format: uuid
        grade:
          type: string
          format: uuid
          nullable: true
        question:
          type: string
          format: uuid
          nullable: true
        assignment:
          type: string
          format: uuid
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - assignment
      - id
      - text
      - user
    CommentDiscussion:
      type: object
      description: validation schema for adding a comment to a Discussion object
      properties:
        body:
          type: array
          items:
            type: string
            maxLength: 20000
          nullable: true
        text:
          type: string
          nullable: true
        course:
          type: string
          format: uuid
        school:
          type: string
          format: uuid
          nullable: true
        thread:
          type: string
          format: uuid
          nullable: true
      required:
      - course
    CommentUpdate:
      type: object
      description: Serializer for updating a Comment object
      properties:
        text:
          type: string
      required:
      - text
    CoreDiscussion:
      type: object
      description: Discussions without the children
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        author:
          allOf:
          - $ref: '#/components/schemas/Author'
          readOnly: true
        parent_comment:
          allOf:
          - $ref: '#/components/schemas/Discussion'
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 500
        body:
          type: array
          items:
            type: string
            maxLength: 20000
          nullable: true
        photos:
          type: array
          items: {}
          nullable: true
        link:
          type: string
          nullable: true
        mute:
          type: boolean
        post_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/PostTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        comment_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        description:
          type: string
          nullable: true
        text:
          type: string
          nullable: true
        course:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        thread:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - author
      - course
      - date_created
      - id
      - last_updated
      - parent_comment
      - school
      - thread
    Course:
      type: object
      description: |-
        Serializer for the Course model.

        Used to convert Course instances into native Python datatypes and vice versa,
        which can be easily rendered into JSON, XML, or other content types.
        ATTRIBUTES
        ----------
        model : Course
            The model the serializer corresponds to.

        fields : tuple
            Tuple indicating all fields in the model to be serialized.

        depth : int
            The depth of foreign key and reverse foreign key relationships to serialize.
        METHODS
        -------
        create(validated_data):
            Create and return a new Course instance, given the validated data.

        update(instance, validated_data):
            Update and return an existing Course instance, given the validated data.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        teacher:
          $ref: '#/components/schemas/TeacherProfileCourse'
        school:
          $ref: '#/components/schemas/School'
        faculty:
          $ref: '#/components/schemas/Faculty'
        department:
          $ref: '#/components/schemas/Department'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        course_code:
          type: string
          nullable: true
          maxLength: 255
        course_unit:
          type: string
          nullable: true
          maxLength: 255
        course_semester:
          type: string
          nullable: true
          maxLength: 255
        entry_code:
          type: string
          nullable: true
          maxLength: 255
        is_accepting_students:
          type: boolean
        assignment_percent:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        quiz_percent:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        arm:
          type: string
          nullable: true
          maxLength: 255
        term_semester:
          type: string
          nullable: true
          maxLength: 255
        level:
          type: string
          nullable: true
        num_students:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        state:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/State45cEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        school_grade:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - date_created
      - department
      - faculty
      - id
      - last_updated
      - school
      - school_grade
      - teacher
      - title
    CourseFolder:
      type: object
      description: |-
        Serializer for the CourseMaterial model.

        Used to convert CourseMaterial instances into native Python datatypes and vice versa,
        which can be easily rendered into JSON, XML, or other content types.

        ATTRIBUTES
        ----------
        model : CourseMaterial
            The model the serializer corresponds to.

        fields : tuple
            Tuple indicating all fields in the model to be serialized.

        depth : int
            The depth of foreign key and reverse foreign key relationships to serialize.

        METHODS
        -------
        create(validated_data):
            Create and return a new CourseMaterial instance, given the validated data.

        update(instance, validated_data):
            Update and return an existing CourseMaterial instance, given the validated data.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 255
        author:
          type: string
          nullable: true
          maxLength: 255
        course:
          type: string
          format: uuid
        folder:
          type: string
          format: uuid
          nullable: true
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - course
      - date_created
      - id
      - last_updated
      - name
    CourseId:
      type: object
      description: |-
        Serializer to receive course ids, single or many
        Helpful for course registration
      properties:
        course_id:
          type: string
      required:
      - course_id
    CourseMaterial:
      type: object
      description: |-
        Serializer for the CourseMaterial model.

        Used to convert CourseMaterial instances into native Python datatypes and vice versa,
        which can be easily rendered into JSON, XML, or other content types.

        ATTRIBUTES
        ----------
        model : CourseMaterial
            The model the serializer corresponds to.

        fields : tuple
            Tuple indicating all fields in the model to be serialized.

        depth : int
            The depth of foreign key and reverse foreign key relationships to serialize.

        METHODS
        -------
        create(validated_data):
            Create and return a new CourseMaterial instance, given the validated data.

        update(instance, validated_data):
            Update and return an existing CourseMaterial instance, given the validated data.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 255
        size:
          type: string
          nullable: true
          maxLength: 255
        public_id:
          type: string
          nullable: true
          maxLength: 255
        description:
          type: string
          nullable: true
        file:
          type: array
          items:
            type: string
          nullable: true
        type:
          $ref: '#/components/schemas/Type830Enum'
        url:
          type: string
          nullable: true
        author:
          type: string
          nullable: true
          maxLength: 255
        attachments:
          type: array
          items: {}
          nullable: true
        course:
          type: string
          format: uuid
        folder:
          type: string
          format: uuid
          nullable: true
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - course
      - date_created
      - id
      - last_updated
    CourseOutline:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        attachments:
          type: array
          items: {}
          nullable: true
        file:
          type: array
          items:
            type: string
          nullable: true
        course:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - course
      - date_created
      - id
      - last_updated
      - school
    CourseOutlineIndex:
      type: object
      properties:
        index:
          type: integer
      required:
      - index
    CourseStudent:
      type: object
      description: Serializer to handle the representation of a CourseStudent object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        student:
          allOf:
          - $ref: '#/components/schemas/CSStudent'
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        archived:
          type: boolean
          nullable: true
        course:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - course
      - date_created
      - id
      - last_updated
      - school
      - student
    CourseTeacher:
      type: object
      description: Serializer to handle the representation of a CourseTeacher object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        teacher:
          $ref: '#/components/schemas/TeacherProfile'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        role:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Role3efEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        course:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - course
      - date_created
      - id
      - last_updated
      - school
      - teacher
    CourseWithRole:
      type: object
      description: Serializer to return a course with the teacher role included
      properties:
        role:
          type: string
        course:
          $ref: '#/components/schemas/Course'
      required:
      - course
      - role
    CreateActivity:
      type: object
      properties:
        course:
          type: string
          format: uuid
        type:
          $ref: '#/components/schemas/Type847Enum'
        data: {}
        creator:
          type: string
          format: uuid
          nullable: true
        assignment:
          type: string
          format: uuid
          nullable: true
        quiz:
          type: string
          format: uuid
          nullable: true
        discussion:
          type: string
          format: uuid
          nullable: true
        announcement:
          type: string
          format: uuid
          nullable: true
      required:
      - course
      - data
      - type
    CreateAnnouncement:
      type: object
      properties:
        author:
          type: string
          format: uuid
          nullable: true
        course:
          type: string
          format: uuid
          nullable: true
        subject:
          type: string
          maxLength: 255
        body:
          type: array
          items:
            type: string
          nullable: true
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - subject
    CreateAssignment:
      type: object
      description: |-
        Serializer for the Assignment model.

        The AssignmentSerializer class provides serialization and deserialization
        functionality for the Assignment model, converting between its instances
      properties:
        name:
          type: string
          maxLength: 255
        course:
          type: string
          format: uuid
        submission_method:
          oneOf:
          - $ref: '#/components/schemas/SubmissionMethodEnum'
          - $ref: '#/components/schemas/BlankEnum'
        start_date:
          type: string
          format: date-time
          nullable: true
        deadline:
          type: string
          format: date-time
          nullable: true
        marks:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        created_by:
          type: string
          format: uuid
          nullable: true
        status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Status072Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        accept_late:
          type: boolean
          nullable: true
        submission_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/SubmissionTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        graded:
          type: boolean
          nullable: true
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - course
    CreateCourse:
      type: object
      description: |-
        Serializer to handle the creation of a new course.

        Used for validation and data transformation when creating a new course entry.
        ATTRIBUTES
        ----------
        METHODS
        -------
        create(validated_data):
            Use the validated data to create a new Course instance.
      properties:
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        course_code:
          type: string
          nullable: true
          maxLength: 255
        course_unit:
          type: string
          nullable: true
          maxLength: 255
        course_semester:
          type: string
          nullable: true
          maxLength: 255
        is_accepting_students:
          type: boolean
        assignment_percent:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        quiz_percent:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        faculty:
          type: string
          format: uuid
          nullable: true
        department:
          type: string
          format: uuid
          nullable: true
        school_grade:
          type: string
          format: uuid
          nullable: true
        arm:
          type: string
          nullable: true
          maxLength: 255
        term_semester:
          type: string
          nullable: true
          maxLength: 255
        level:
          type: string
          nullable: true
        state:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/State45cEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - title
    CreateCourseFolder:
      type: object
      description: |-
        Serializer to handle the creation of new Folders instances.

        Used for validation and data transformation when creating new Folder objects.
      properties:
        course:
          type: string
          format: uuid
        folder:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          maxLength: 255
        author:
          type: string
          nullable: true
          maxLength: 255
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - course
      - name
    CreateCourseMaterial:
      type: object
      description: |-
        Serializer to handle the creation of new CourseMaterial instances.

        Used for validation and data transformation when creating new CourseMaterial objects.

        ATTRIBUTES
        ----------
        file : URLField
            A URL pointing to the course material file.

        course_id : CharField
            The ID of the associated course for the course material.

        title : CharField
            The title of the course material.

        description : CharField
            A brief description of the course material.

        METHODS
        -------
        create(validated_data):
            Create and return a new CourseMaterial instance, given the validated data.
      properties:
        file:
          type: array
          items:
            type: string
          nullable: true
        course:
          type: string
          format: uuid
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        folder:
          type: string
          format: uuid
          nullable: true
        type:
          $ref: '#/components/schemas/Type830Enum'
        public_id:
          type: string
          nullable: true
          maxLength: 255
        size:
          type: string
          nullable: true
          maxLength: 255
        url:
          type: string
          nullable: true
        author:
          type: string
          nullable: true
          maxLength: 255
        school:
          type: string
          format: uuid
          nullable: true
        attachments:
          type: array
          items: {}
          nullable: true
      required:
      - course
    CreateCourseOutline:
      type: object
      properties:
        course:
          type: string
          format: uuid
        attachments:
          type: array
          items: {}
          nullable: true
        file:
          type: array
          items:
            type: string
          nullable: true
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - course
    CreateDirectorySettings:
      type: object
      properties:
        students: {}
        teachers: {}
        school:
          type: string
          format: uuid
      required:
      - school
    CreateDiscussion:
      type: object
      description: validation schema for creating a Discussion object
      properties:
        title:
          type: string
          maxLength: 500
        body:
          type: array
          items:
            type: string
            maxLength: 20000
          nullable: true
        photos:
          type: array
          items: {}
          nullable: true
        link:
          type: string
          nullable: true
        post_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/PostTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        description:
          type: string
          nullable: true
        text:
          type: string
          nullable: true
        course:
          type: string
          format: uuid
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - course
    CreateSchoolAdmin:
      type: object
      properties:
        user:
          type: string
          format: uuid
        school:
          type: string
          format: uuid
        role:
          nullable: true
          minimum: -2147483648
          maximum: 2147483647
          oneOf:
          - $ref: '#/components/schemas/Role694Enum'
          - $ref: '#/components/schemas/NullEnum'
      required:
      - school
      - user
    CreateStudentGroup:
      type: object
      properties:
        faculty:
          type: string
          format: uuid
          nullable: true
        department:
          type: string
          format: uuid
          nullable: true
        level:
          type: array
          items:
            type: string
            maxLength: 10
          nullable: true
        course:
          type: string
          format: uuid
          nullable: true
        school:
          type: string
          format: uuid
          nullable: true
        section:
          type: string
          nullable: true
          maxLength: 100
        grade:
          type: string
          format: uuid
          nullable: true
        arm:
          type: array
          items:
            type: string
            maxLength: 10
          nullable: true
    CreateStudentProfile:
      type: object
      description: CreateStudentSerializer creates a new student account
      properties:
        user:
          type: string
          format: uuid
        matric:
          type: string
          nullable: true
          maxLength: 50
        school:
          type: string
          format: uuid
          nullable: true
        grade:
          type: string
          format: uuid
          nullable: true
        arm:
          type: string
          nullable: true
          maxLength: 50
        class_number:
          type: string
          nullable: true
          maxLength: 50
        faculty:
          type: string
          format: uuid
          nullable: true
        department:
          type: string
          format: uuid
          nullable: true
        level:
          type: string
          nullable: true
          maxLength: 10
      required:
      - user
    CreateSubmission:
      type: object
      description: |-
        Serializer for the Submission model.

        The SubmissionSerializer class provides serialization and deserialization
        functionality for the Submission model, converting between its instances
        and JSON.
      properties:
        student:
          type: string
          format: uuid
          nullable: true
        assignment:
          type: string
          format: uuid
          nullable: true
        text:
          type: array
          items:
            type: string
          nullable: true
        files:
          type: array
          items: {}
          nullable: true
        notes:
          type: string
        is_graded:
          type: boolean
        school:
          type: string
          format: uuid
          nullable: true
    CreateTeacherProfile:
      type: object
      description: CreateStudentSerializer creates a new teacher account
      properties:
        user:
          type: string
          format: uuid
        school:
          type: string
          format: uuid
        title:
          type: string
          nullable: true
          maxLength: 500
      required:
      - school
      - user
    CreatedBy:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        fullname:
          type: string
      required:
      - email
      - first_name
      - fullname
      - last_name
    Creator:
      type: object
      properties:
        id:
          type: string
        fullname:
          type: string
      required:
      - fullname
      - id
    DayOfWeekEnum:
      enum:
      - monday
      - tuesday
      - wednesday
      - thursday
      - friday
      - saturday
      - sunday
      type: string
      description: |-
        * `monday` - Monday
        * `tuesday` - Tuesday
        * `wednesday` - Wednesday
        * `thursday` - Thursday
        * `friday` - Friday
        * `saturday` - Saturday
        * `sunday` - Sunday
    DaysOfWeekEnum:
      enum:
      - monday
      - tuesday
      - wednesday
      - thursday
      - friday
      - saturday
      - sunday
      type: string
      description: |-
        * `monday` - Monday
        * `tuesday` - Tuesday
        * `wednesday` - Wednesday
        * `thursday` - Thursday
        * `friday` - Friday
        * `saturday` - Saturday
        * `sunday` - Sunday
    DeleteCourseMaterials:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
            format: uuid
      required:
      - ids
    DeleteFoldersAndMaterials:
      type: object
      properties:
        folders:
          type: array
          items:
            type: string
            format: uuid
        materials:
          type: array
          items:
            type: string
            format: uuid
      required:
      - folders
      - materials
    DeleteStudentProfile:
      type: object
      properties:
        password:
          type: string
      required:
      - password
    Department:
      type: object
      description: Serializer for the general representation of a Department object,
        many or single
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        hod:
          $ref: '#/components/schemas/UserWithoutPassword'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 200
        code:
          type: string
          nullable: true
          maxLength: 10
        levels:
          type: array
          items:
            type: string
          nullable: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        faculty:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - date_created
      - faculty
      - hod
      - id
      - last_updated
      - name
      - school
    DepartmentCreate:
      type: object
      description: |-
        Serializer to create a Department object
        Contains fields that can be inserted into the model

        Note: the school and hod fields allow for the passing of id strings in the request
      properties:
        name:
          type: string
          maxLength: 200
        code:
          type: string
          nullable: true
          maxLength: 10
        school:
          type: string
          format: uuid
        faculty:
          type: string
          format: uuid
          nullable: true
        hod:
          type: string
          format: uuid
          nullable: true
        levels:
          type: array
          items:
            type: string
          nullable: true
      required:
      - name
      - school
    DepartmentMin:
      type: object
      description: Serializer to represent minimal department object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 200
        code:
          type: string
          nullable: true
          maxLength: 10
        levels:
          type: array
          items:
            type: string
          nullable: true
        faculty:
          type: string
          format: uuid
          nullable: true
      required:
      - id
      - name
    DepartmentUpdate:
      type: object
      description: |-
        Serializer for the updating of the Department object
        Contains fields that can/should be updated
      properties:
        name:
          type: string
          maxLength: 200
        code:
          type: string
          nullable: true
          maxLength: 10
        hod:
          type: string
          format: uuid
          nullable: true
        faculty:
          type: string
          format: uuid
          nullable: true
        levels:
          type: array
          items:
            type: string
          nullable: true
      required:
      - name
    DesignationEnum:
      enum:
      - primary
      - backup
      type: string
      description: |-
        * `primary` - Primary
        * `backup` - Backup
    DeviceTypeEnum:
      enum:
      - ios
      - android
      - web
      type: string
      description: |-
        * `ios` - ios
        * `android` - android
        * `web` - web
    DirectorySettings:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        students: {}
        teachers: {}
        school:
          type: string
          format: uuid
      required:
      - date_created
      - id
      - last_updated
      - school
    Discussion:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        author:
          allOf:
          - $ref: '#/components/schemas/Author'
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 500
        body:
          type: array
          items:
            type: string
            maxLength: 20000
          nullable: true
        photos:
          type: array
          items: {}
          nullable: true
        link:
          type: string
          nullable: true
        mute:
          type: boolean
        post_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/PostTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        comment_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        description:
          type: string
          nullable: true
        text:
          type: string
          nullable: true
        course:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        parent_comment:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        thread:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - author
      - course
      - date_created
      - id
      - last_updated
      - parent_comment
      - school
      - thread
    DiscussionWithAuthor:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        author:
          allOf:
          - $ref: '#/components/schemas/Author'
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 500
        body:
          type: array
          items:
            type: string
            maxLength: 20000
          nullable: true
        photos:
          type: array
          items: {}
          nullable: true
        link:
          type: string
          nullable: true
        mute:
          type: boolean
        post_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/PostTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        comment_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        description:
          type: string
          nullable: true
        text:
          type: string
          nullable: true
        course:
          type: string
          format: uuid
        parent_comment:
          type: string
          format: uuid
          nullable: true
        school:
          type: string
          format: uuid
          nullable: true
        thread:
          type: string
          format: uuid
          nullable: true
      required:
      - author
      - course
      - date_created
      - id
      - last_updated
    EditCourse:
      type: object
      description: Serializer to handle the editing of an existing course.
      properties:
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        course_code:
          type: string
          nullable: true
          maxLength: 255
        course_unit:
          type: string
          nullable: true
          maxLength: 255
        course_semester:
          type: string
          nullable: true
          maxLength: 255
        is_accepting_students:
          type: boolean
        assignment_percent:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        quiz_percent:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        faculty:
          type: string
          format: uuid
          nullable: true
        department:
          type: string
          format: uuid
          nullable: true
        school_grade:
          type: string
          format: uuid
          nullable: true
        arm:
          type: string
          nullable: true
          maxLength: 255
        term_semester:
          type: string
          nullable: true
          maxLength: 255
        level:
          type: string
          nullable: true
        state:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/State45cEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        teacher:
          type: string
          format: uuid
          nullable: true
      required:
      - title
    EditCourseTeacher:
      type: object
      description: Serializer to edit a CourseTeacher object
      properties:
        teacher:
          type: string
          format: uuid
        role:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Role3efEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
      required:
      - teacher
    EditDiscussion:
      type: object
      description: validation schema for editing a Discussion object
      properties:
        title:
          type: string
          maxLength: 500
        body:
          type: array
          items:
            type: string
            maxLength: 20000
          nullable: true
        post_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/PostTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        mute:
          type: boolean
        photos:
          type: array
          items: {}
          nullable: true
        link:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        text:
          type: string
          nullable: true
    Error:
      type: object
      description: 'ErrorSerializer is a common serializer with the format {"error":
        "content of error"}'
      properties:
        error:
          type: string
      required:
      - error
    Event:
      type: object
      properties:
        app_name:
          type: string
          maxLength: 200
        app_id:
          type: string
          format: uuid
      required:
      - app_id
      - app_name
    Faculty:
      type: object
      description: Serializer for the general representation of a Faculty objects,
        many or single
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        dean:
          $ref: '#/components/schemas/UserWithoutPassword'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 200
        code:
          type: string
          nullable: true
          maxLength: 10
        levels:
          type: array
          items:
            type: string
          nullable: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - date_created
      - dean
      - id
      - last_updated
      - name
      - school
    FacultyCreate:
      type: object
      description: |-
        Serializer to create a Faculty object
        Contains fields that can be inserted into the model

        Note: the school and dean fields allow for the passing of id strings in the request
      properties:
        name:
          type: string
          maxLength: 200
        code:
          type: string
          nullable: true
          maxLength: 10
        school:
          type: string
          format: uuid
        dean:
          type: string
          format: uuid
          nullable: true
        levels:
          type: array
          items:
            type: string
          nullable: true
      required:
      - name
      - school
    FacultyDepartment:
      type: object
      description: Serializer to represent faculties with their related departments
      properties:
        faculties:
          type: array
          items:
            $ref: '#/components/schemas/FacultyMin'
        departments:
          type: array
          items:
            $ref: '#/components/schemas/DepartmentMin'
      required:
      - departments
      - faculties
    FacultyMin:
      type: object
      description: Serializer to represent a minimal faculty object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        code:
          type: string
      required:
      - code
      - id
      - name
    FacultyUpdate:
      type: object
      description: |-
        Serializer for the updating of the Faculty object
        Contains fields that can/should be updated
      properties:
        name:
          type: string
          maxLength: 200
        code:
          type: string
          nullable: true
          maxLength: 10
        dean:
          type: string
          format: uuid
          nullable: true
        levels:
          type: array
          items:
            type: string
          nullable: true
      required:
      - name
    FoldersAndMaterials:
      type: object
      properties:
        folders:
          type: array
          items:
            $ref: '#/components/schemas/CourseFolder'
        materials:
          type: array
          items:
            $ref: '#/components/schemas/CourseMaterial'
      required:
      - folders
      - materials
    ForgotPasswordRequest:
      type: object
      description: |-
        Serializer for handling password reset requests.

        This serializer is designed to validate email addresses for the purpose of initiating a password reset process.
        It ensures that the email provided corresponds to a valid user account and throws a validation error if the
        email is not associated with any user.

        ATTRIBUTES
        ----------
        email : EmailField
            The email address for which the password reset process should be initiated. It's mandatory and
            should not be blank. This field also checks if the provided email corresponds to a valid user account.

        USAGE
        -----
        To use this serializer, pass the user's email as input, and it will validate whether the email is valid
        for the password reset process. If the validation fails, a suitable error will be thrown.

        EXAMPLE
        -------
        serializer = ForgotPasswordRequestSerializer(data={"email": "user@example.com"})
        if serializer.is_valid():
            # Continue with the password reset process
        else:
            # Handle validation errors
      properties:
        email:
          type: string
          format: email
      required:
      - email
    FullQuestion:
      type: object
      description: Serializer for the Question object with the answers included
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        question:
          type: string
        options:
          type: array
          items:
            type: string
          nullable: true
        answer:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        feedback:
          type: string
          nullable: true
        quiz:
          type: string
          format: uuid
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - date_created
      - id
      - last_updated
      - quiz
    Grade:
      type: object
      description: Serializer for a Grade Model
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/GradeUser'
          readOnly: true
        assignment:
          allOf:
          - $ref: '#/components/schemas/GradeAssignment'
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        score:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        total:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        type:
          $ref: '#/components/schemas/Type030Enum'
        feedback:
          type: string
          nullable: true
        quiz:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        course:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        student:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - assignment
      - course
      - date_created
      - id
      - last_updated
      - quiz
      - school
      - student
      - user
    GradeAssignment:
      type: object
      description: |-
        Serializer for the Assignment model.

        The AssignmentSerializer class provides serialization and deserialization
        functionality for the Assignment model, converting between its instances
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        created_by:
          allOf:
          - $ref: '#/components/schemas/GradeUser'
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 255
        submission_method:
          oneOf:
          - $ref: '#/components/schemas/SubmissionMethodEnum'
          - $ref: '#/components/schemas/BlankEnum'
        start_date:
          type: string
          format: date-time
          nullable: true
        deadline:
          type: string
          format: date-time
          nullable: true
        marks:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Status072Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        accept_late:
          type: boolean
          nullable: true
        submission_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/SubmissionTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        submission_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        graded:
          type: boolean
          nullable: true
        course:
          type: string
          format: uuid
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - course
      - created_by
      - date_created
      - id
      - last_updated
    GradeCreate:
      type: object
      description: Serializer for creating a Grade object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        score:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        total:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        type:
          $ref: '#/components/schemas/Type030Enum'
        student:
          type: string
          format: uuid
          nullable: true
        assignment:
          type: string
          format: uuid
          nullable: true
        course:
          type: string
          format: uuid
        quiz:
          type: string
          format: uuid
          nullable: true
        school:
          type: string
          format: uuid
          nullable: true
        feedback:
          type: string
          nullable: true
      required:
      - course
      - id
    GradeMin:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        student:
          allOf:
          - $ref: '#/components/schemas/GradeStudent'
          readOnly: true
        assignment:
          allOf:
          - $ref: '#/components/schemas/GradeAssignment'
          readOnly: true
        quiz:
          allOf:
          - $ref: '#/components/schemas/GradeQuiz'
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        score:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        total:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        type:
          $ref: '#/components/schemas/Type030Enum'
        feedback:
          type: string
          nullable: true
        user:
          type: string
          format: uuid
          nullable: true
        course:
          type: string
          format: uuid
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - assignment
      - course
      - date_created
      - id
      - last_updated
      - quiz
      - student
    GradeOverview:
      type: object
      properties:
        student:
          $ref: '#/components/schemas/StudentProfile'
        assignment:
          type: integer
        quiz:
          type: integer
        total:
          type: integer
      required:
      - assignment
      - quiz
      - student
      - total
    GradeQuiz:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        creator:
          allOf:
          - $ref: '#/components/schemas/GradeUser'
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 300
        type:
          oneOf:
          - $ref: '#/components/schemas/TypeF3eEnum'
          - $ref: '#/components/schemas/BlankEnum'
        start_time:
          type: string
          format: date-time
          nullable: true
        shuffle_questions:
          type: boolean
        allow_late_entries:
          type: boolean
        time_limit:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        graded:
          type: boolean
        marks_per_question:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        marks:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        deadline:
          type: string
          format: date-time
          nullable: true
        status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Status072Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        submission_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        question_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/QuestionTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        course:
          type: string
          format: uuid
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - course
      - creator
      - date_created
      - id
      - last_updated
    GradeStudent:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          $ref: '#/components/schemas/GradeUser'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        matric:
          type: string
          nullable: true
          maxLength: 50
        level:
          type: string
          nullable: true
          maxLength: 10
        arm:
          type: string
          nullable: true
          maxLength: 50
        class_number:
          type: string
          nullable: true
          maxLength: 50
        num_courses:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        status:
          $ref: '#/components/schemas/Status8e9Enum'
        school:
          type: string
          format: uuid
          nullable: true
        department:
          type: string
          format: uuid
          nullable: true
        faculty:
          type: string
          format: uuid
          nullable: true
        grade:
          type: string
          format: uuid
          nullable: true
      required:
      - date_created
      - id
      - last_updated
      - user
    GradeUpdate:
      type: object
      description: Serializer for updating a Grade object
      properties:
        score:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        total:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        type:
          $ref: '#/components/schemas/Type030Enum'
        feedback:
          type: string
          nullable: true
    GradeUser:
      type: object
      properties:
        id:
          type: string
        fullname:
          type: string
      required:
      - fullname
      - id
    GradesData:
      type: object
      properties:
        student:
          $ref: '#/components/schemas/GradeStudent'
        assignment_grades:
          type: array
          items:
            $ref: '#/components/schemas/GradeMin'
        quiz_grades:
          type: array
          items:
            $ref: '#/components/schemas/GradeMin'
      required:
      - assignment_grades
      - quiz_grades
      - student
    GradesMetadata:
      type: object
      properties:
        type:
          type: string
        key:
          type: integer
        id:
          type: string
          format: uuid
        total:
          type: integer
      required:
      - id
      - key
      - total
      - type
    Id:
      type: object
      properties:
        id:
          type: string
      required:
      - id
    InviteAdmin:
      type: object
      properties:
        email:
          type: string
          format: email
        role:
          $ref: '#/components/schemas/Role694Enum'
      required:
      - email
      - role
    InviteStudent:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    Invoice:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        data: {}
        school:
          type: string
          format: uuid
      required:
      - data
      - date_created
      - id
      - last_updated
      - school
    InvoiceCreate:
      type: object
      properties:
        data: {}
        school:
          type: string
          format: uuid
      required:
      - data
      - school
    InvoiceDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        school:
          $ref: '#/components/schemas/School'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        data: {}
      required:
      - data
      - date_created
      - id
      - last_updated
      - school
    InvoiceUpdate:
      type: object
      properties:
        data: {}
      required:
      - data
    Load:
      type: object
      properties:
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/MinSchedule'
        activities:
          type: array
          items:
            $ref: '#/components/schemas/MinCalendarActivity'
        courses:
          type: array
          items:
            $ref: '#/components/schemas/MinCourse'
        course_teachers:
          type: array
          items:
            $ref: '#/components/schemas/MinCourseTeacher'
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/MinAssignment'
        assignment_questions:
          type: array
          items:
            $ref: '#/components/schemas/MinQuestion'
        quizzes:
          type: array
          items:
            $ref: '#/components/schemas/MinQuiz'
        quiz_questions:
          type: array
          items:
            $ref: '#/components/schemas/MinQuizQuestion'
        course_materials:
          type: array
          items:
            $ref: '#/components/schemas/MinCourseMaterial'
        course_folders:
          type: array
          items:
            $ref: '#/components/schemas/MinCourseFolder'
        course_students:
          type: array
          items:
            $ref: '#/components/schemas/MinCourseStudent'
      required:
      - activities
      - assignment_questions
      - assignments
      - course_folders
      - course_materials
      - course_students
      - course_teachers
      - courses
      - quiz_questions
      - quizzes
      - schedules
    Login:
      type: object
      description: |-
        Serializer for user login.

        This serializer is used to validate the data required for user login, namely email and password. It
        ensures that the user provides a valid email address and a password during the login process.

        ATTRIBUTES
        ----------
        email : CharField
            The email address of the user attempting to log in. This field is mandatory and should not exceed
            255 characters in length.

        password : CharField
            The password provided by the user for authentication. This field is mandatory and should not exceed
            200 characters in length. For security reasons, this field is write-only and its value will not be
            exposed when serializing instances of this serializer.

        USAGE
        -----
        The `LoginSerializer` can be utilized during the login process to validate the user's input, ensuring
        that the email and password provided match the expected format and constraints.
      properties:
        email:
          type: string
          maxLength: 255
        password:
          type: string
          writeOnly: true
          maxLength: 200
        device_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/DeviceTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        device_token:
          type: string
          nullable: true
          maxLength: 1000
      required:
      - email
      - password
    Message:
      type: object
      description: 'MessageSerializer is a common serializer with the format {"message":
        "content of message"}'
      properties:
        message:
          type: string
      required:
      - message
    MinAssignment:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 255
        submission_method:
          oneOf:
          - $ref: '#/components/schemas/SubmissionMethodEnum'
          - $ref: '#/components/schemas/BlankEnum'
        start_date:
          type: string
          format: date-time
          nullable: true
        deadline:
          type: string
          format: date-time
          nullable: true
        marks:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Status072Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        accept_late:
          type: boolean
          nullable: true
        submission_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/SubmissionTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        submission_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        graded:
          type: boolean
          nullable: true
        course:
          type: string
          format: uuid
        created_by:
          type: string
          format: uuid
          nullable: true
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - course
      - date_created
      - id
      - last_updated
    MinCalendarActivity:
      type: object
      description: Serializer for Activity model
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        course:
          allOf:
          - $ref: '#/components/schemas/CalendarCourse'
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        type:
          $ref: '#/components/schemas/Type706Enum'
        title:
          type: string
          maxLength: 255
        start_time:
          type: string
          format: date-time
          nullable: true
        end_time:
          type: string
          format: date-time
          nullable: true
        quiz:
          type: string
          format: uuid
          nullable: true
        assignment:
          type: string
          format: uuid
          nullable: true
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - course
      - date_created
      - id
      - last_updated
      - title
      - type
    MinCourse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        course_code:
          type: string
          nullable: true
          maxLength: 255
        course_unit:
          type: string
          nullable: true
          maxLength: 255
        course_semester:
          type: string
          nullable: true
          maxLength: 255
        entry_code:
          type: string
          nullable: true
          maxLength: 255
        is_accepting_students:
          type: boolean
        assignment_percent:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        quiz_percent:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        arm:
          type: string
          nullable: true
          maxLength: 255
        term_semester:
          type: string
          nullable: true
          maxLength: 255
        level:
          type: string
          nullable: true
        num_students:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        state:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/State45cEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        teacher:
          type: string
          format: uuid
          nullable: true
        school:
          type: string
          format: uuid
          nullable: true
        faculty:
          type: string
          format: uuid
          nullable: true
        department:
          type: string
          format: uuid
          nullable: true
        school_grade:
          type: string
          format: uuid
          nullable: true
      required:
      - date_created
      - id
      - last_updated
      - title
    MinCourseFolder:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 255
        author:
          type: string
          nullable: true
          maxLength: 255
        course:
          type: string
          format: uuid
        folder:
          type: string
          format: uuid
          nullable: true
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - course
      - date_created
      - id
      - last_updated
      - name
    MinCourseMaterial:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 255
        size:
          type: string
          nullable: true
          maxLength: 255
        public_id:
          type: string
          nullable: true
          maxLength: 255
        description:
          type: string
          nullable: true
        file:
          type: array
          items:
            type: string
          nullable: true
        type:
          $ref: '#/components/schemas/Type830Enum'
        url:
          type: string
          nullable: true
        author:
          type: string
          nullable: true
          maxLength: 255
        attachments:
          type: array
          items: {}
          nullable: true
        course:
          type: string
          format: uuid
        folder:
          type: string
          format: uuid
          nullable: true
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - course
      - date_created
      - id
      - last_updated
    MinCourseStudent:
      type: object
      description: Serializer to handle the representation of a CourseStudent object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        student:
          allOf:
          - $ref: '#/components/schemas/CSStudent'
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        archived:
          type: boolean
          nullable: true
        course:
          type: string
          format: uuid
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - course
      - date_created
      - id
      - last_updated
      - student
    MinCourseTeacher:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        role:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Role3efEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        course:
          type: string
          format: uuid
        teacher:
          type: string
          format: uuid
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - course
      - date_created
      - id
      - last_updated
      - teacher
    MinQuestion:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          nullable: true
          maxLength: 255
        text:
          type: array
          items:
            type: string
          nullable: true
        attachments:
          type: array
          items: {}
          nullable: true
        course:
          type: string
          format: uuid
        assignment:
          type: string
          format: uuid
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - assignment
      - course
      - date_created
      - id
      - last_updated
    MinQuiz:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 300
        type:
          oneOf:
          - $ref: '#/components/schemas/TypeF3eEnum'
          - $ref: '#/components/schemas/BlankEnum'
        start_time:
          type: string
          format: date-time
          nullable: true
        shuffle_questions:
          type: boolean
        allow_late_entries:
          type: boolean
        time_limit:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        graded:
          type: boolean
        marks_per_question:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        marks:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        deadline:
          type: string
          format: date-time
          nullable: true
        status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Status072Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        submission_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        question_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/QuestionTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        course:
          type: string
          format: uuid
        creator:
          type: string
          format: uuid
          nullable: true
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - course
      - date_created
      - id
      - last_updated
    MinQuizQuestion:
      type: object
      description: |-
        Serializer for the Question Model
        General serializer for reading complete Question data with a depth of 1
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        question:
          type: string
        options:
          type: array
          items:
            type: string
          nullable: true
        feedback:
          type: string
          nullable: true
        quiz:
          type: string
          format: uuid
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - date_created
      - id
      - last_updated
      - quiz
    MinSchedule:
      type: object
      description: Serializer for reading Schedule model
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        course:
          $ref: '#/components/schemas/CalendarCourse'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        day_of_week:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/DayOfWeekEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        start_time:
          type: string
          format: date-time
          nullable: true
        end_time:
          type: string
          format: date-time
          nullable: true
        is_recurring:
          type: boolean
          nullable: true
        end_date:
          type: string
          format: date-time
          nullable: true
        type:
          type: string
          nullable: true
          maxLength: 50
        title:
          type: string
          nullable: true
          maxLength: 200
        frequency:
          type: string
          nullable: true
          maxLength: 200
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - course
      - date_created
      - id
      - last_updated
    NameEnum:
      enum:
      - signup
      - reset
      - transfer
      type: string
      description: |-
        * `signup` - signup
        * `reset` - reset
        * `transfer` - transfer
    Nested:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        course_code:
          type: string
          nullable: true
          maxLength: 255
        course_unit:
          type: string
          nullable: true
          maxLength: 255
        course_semester:
          type: string
          nullable: true
          maxLength: 255
        entry_code:
          type: string
          nullable: true
          maxLength: 255
        is_accepting_students:
          type: boolean
        assignment_percent:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        quiz_percent:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        arm:
          type: string
          nullable: true
          maxLength: 255
        term_semester:
          type: string
          nullable: true
          maxLength: 255
        level:
          type: string
          nullable: true
        num_students:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        state:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/State45cEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        teacher:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        faculty:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        department:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        school_grade:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - date_created
      - department
      - faculty
      - id
      - last_updated
      - school
      - school_grade
      - teacher
      - title
    NullEnum:
      enum:
      - null
    OtpRequest:
      type: object
      properties:
        target:
          type: string
          writeOnly: true
          maxLength: 128
        name:
          $ref: '#/components/schemas/NameEnum'
      required:
      - target
    PaginatedActivityList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Activity'
    PaginatedCoreDiscussionList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/CoreDiscussion'
    PaginatedDirectorySettingsList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/DirectorySettings'
    PaginatedDiscussionList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Discussion'
    PaginatedSchoolList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/School'
    PaginatedStudentInviteList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/StudentInvite'
    PaginatedStudentList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/Student'
    PaginatedTeacherInviteList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/TeacherInvite'
    PaginatedTeacherProfileList:
      type: object
      properties:
        count:
          type: integer
          example: 123
        next:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=400&limit=100
        previous:
          type: string
          nullable: true
          format: uri
          example: http://api.example.org/accounts/?offset=200&limit=100
        results:
          type: array
          items:
            $ref: '#/components/schemas/TeacherProfile'
    Password:
      type: object
      properties:
        old_password:
          type: string
        new_password:
          type: string
      required:
      - new_password
      - old_password
    PatchedBillingUpdate:
      type: object
      properties:
        fullname:
          type: string
          nullable: true
          maxLength: 200
        number:
          type: string
          nullable: true
          maxLength: 200
        expiry_date:
          type: string
          nullable: true
        cvv:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        address:
          type: string
          nullable: true
          maxLength: 200
    PatchedCalendarActivityUpdate:
      type: object
      description: Serializer for updating activity information.
      properties:
        type:
          $ref: '#/components/schemas/Type706Enum'
        title:
          type: string
          maxLength: 255
        start_time:
          type: string
          format: date-time
          nullable: true
        end_time:
          type: string
          format: date-time
          nullable: true
    PatchedCommentUpdate:
      type: object
      description: Serializer for updating a Comment object
      properties:
        text:
          type: string
    PatchedDepartmentUpdate:
      type: object
      description: |-
        Serializer for the updating of the Department object
        Contains fields that can/should be updated
      properties:
        name:
          type: string
          maxLength: 200
        code:
          type: string
          nullable: true
          maxLength: 10
        hod:
          type: string
          format: uuid
          nullable: true
        faculty:
          type: string
          format: uuid
          nullable: true
        levels:
          type: array
          items:
            type: string
          nullable: true
    PatchedDiscussion:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        author:
          allOf:
          - $ref: '#/components/schemas/Author'
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 500
        body:
          type: array
          items:
            type: string
            maxLength: 20000
          nullable: true
        photos:
          type: array
          items: {}
          nullable: true
        link:
          type: string
          nullable: true
        mute:
          type: boolean
        post_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/PostTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        comment_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        description:
          type: string
          nullable: true
        text:
          type: string
          nullable: true
        course:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        parent_comment:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        thread:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
    PatchedEditCourse:
      type: object
      description: Serializer to handle the editing of an existing course.
      properties:
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        course_code:
          type: string
          nullable: true
          maxLength: 255
        course_unit:
          type: string
          nullable: true
          maxLength: 255
        course_semester:
          type: string
          nullable: true
          maxLength: 255
        is_accepting_students:
          type: boolean
        assignment_percent:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        quiz_percent:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        faculty:
          type: string
          format: uuid
          nullable: true
        department:
          type: string
          format: uuid
          nullable: true
        school_grade:
          type: string
          format: uuid
          nullable: true
        arm:
          type: string
          nullable: true
          maxLength: 255
        term_semester:
          type: string
          nullable: true
          maxLength: 255
        level:
          type: string
          nullable: true
        state:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/State45cEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        teacher:
          type: string
          format: uuid
          nullable: true
    PatchedFacultyUpdate:
      type: object
      description: |-
        Serializer for the updating of the Faculty object
        Contains fields that can/should be updated
      properties:
        name:
          type: string
          maxLength: 200
        code:
          type: string
          nullable: true
          maxLength: 10
        dean:
          type: string
          format: uuid
          nullable: true
        levels:
          type: array
          items:
            type: string
          nullable: true
    PatchedGradeUpdate:
      type: object
      description: Serializer for updating a Grade object
      properties:
        score:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        total:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        type:
          $ref: '#/components/schemas/Type030Enum'
        feedback:
          type: string
          nullable: true
    PatchedInvoiceUpdate:
      type: object
      properties:
        data: {}
    PatchedQuestionUpdate:
      type: object
      description: |-
        Serializer for updating the Question object
        Specifies fields to be used in updating, similar to create but features only changeable fields
      properties:
        question:
          type: string
        options:
          type: array
          items:
            type: string
          nullable: true
        answer:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        feedback:
          type: string
          nullable: true
    PatchedQuizUpdate:
      type: object
      description: |-
        Serializer for updating the Quiz object
        Specifies fields to be used in updating, similar to create but features only changeable fields
      properties:
        name:
          type: string
          maxLength: 300
        type:
          oneOf:
          - $ref: '#/components/schemas/TypeF3eEnum'
          - $ref: '#/components/schemas/BlankEnum'
        start_time:
          type: string
          format: date-time
          nullable: true
        shuffle_questions:
          type: boolean
        allow_late_entries:
          type: boolean
        time_limit:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        graded:
          type: boolean
        marks_per_question:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        marks:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Status072Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        question_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/QuestionTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        deadline:
          type: string
          format: date-time
          nullable: true
    PatchedSchedule:
      type: object
      description: Serializer for reading Schedule model
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        course:
          $ref: '#/components/schemas/CalendarCourse'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        day_of_week:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/DayOfWeekEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        start_time:
          type: string
          format: date-time
          nullable: true
        end_time:
          type: string
          format: date-time
          nullable: true
        is_recurring:
          type: boolean
          nullable: true
        end_date:
          type: string
          format: date-time
          nullable: true
        type:
          type: string
          nullable: true
          maxLength: 50
        title:
          type: string
          nullable: true
          maxLength: 200
        frequency:
          type: string
          nullable: true
          maxLength: 200
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
    PatchedSchool:
      type: object
      description: |-
        Serializer for the School model.

        The SchoolSerializer class provides serialization and deserialization
        functionality for the School model, converting between its instances
        and their JSON representation.

        PARAMETERS
        ----------
        serializers.ModelSerializer:
            Inherits from the ModelSerializer of Django Rest Framework which
            provides default implementations for create() and update()
            and default field mapping for the model's fields.

        ATTRIBUTES
        ----------
        Meta:
            An internal class that provides metadata to the parent serializer,
            specifying the model it works with and its fields.

        RETURNS
        -------
        JSON representation of the School model instance.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        creator:
          $ref: '#/components/schemas/Creator'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 1000
        code:
          type: string
          maxLength: 1000
        description:
          type: string
          nullable: true
        school_type:
          $ref: '#/components/schemas/SchoolTypeEnum'
        logo:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        address:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
          maxLength: 20
        email:
          type: string
          nullable: true
          maxLength: 100
        created_date:
          type: string
          format: date-time
          nullable: true
        levels:
          type: array
          items:
            type: string
          nullable: true
        size:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        num_of_faculties:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
    PatchedSchoolGradeUpdate:
      type: object
      description: |-
        Serializer for the updating of the Grade object
        Contains fields that can/should be updated
      properties:
        name:
          type: string
          maxLength: 200
        code:
          type: string
          nullable: true
          maxLength: 10
        teacher:
          type: string
          format: uuid
          nullable: true
        arms:
          type: array
          items:
            type: string
          nullable: true
    PatchedStudentInvite:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 254
        matric:
          type: string
          maxLength: 255
        level:
          type: string
          nullable: true
          maxLength: 10
        section:
          type: string
          nullable: true
          maxLength: 50
        arm:
          type: string
          nullable: true
          maxLength: 50
        class_number:
          type: string
          nullable: true
          maxLength: 50
        state:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/StateF04Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        school:
          type: string
          format: uuid
        department:
          type: string
          format: uuid
          nullable: true
        faculty:
          type: string
          format: uuid
          nullable: true
    PatchedSubscriptionUpdate:
      type: object
      properties:
        students_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        expected_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        status:
          type: string
          maxLength: 20
        due_date:
          type: string
          format: date-time
        currency:
          type: string
          maxLength: 5
    PatchedTeacherInvite:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 254
        state:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/StateF04Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        school:
          type: string
          format: uuid
        department:
          type: string
          format: uuid
          nullable: true
        faculty:
          type: string
          format: uuid
          nullable: true
    PatchedTransactionUpdate:
      type: object
      properties:
        students_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        start_period:
          type: string
          format: date-time
        end_period:
          type: string
          format: date-time
        payment_method:
          $ref: '#/components/schemas/PaymentMethodEnum'
        status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Status08aEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        currency:
          type: string
          maxLength: 5
    PatchedUpdateActivity:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/Type847Enum'
        data: {}
    PatchedUpdateAnnouncement:
      type: object
      properties:
        subject:
          type: string
          maxLength: 255
        body:
          type: array
          items:
            type: string
          nullable: true
    PatchedUpdateAssignment:
      type: object
      description: |-
        Serializer for the Assignment model.

        The AssignmentSerializer class provides serialization and deserialization
        functionality for the Assignment model, converting between its instances
      properties:
        name:
          type: string
          maxLength: 255
        submission_method:
          oneOf:
          - $ref: '#/components/schemas/SubmissionMethodEnum'
          - $ref: '#/components/schemas/BlankEnum'
        deadline:
          type: string
          format: date-time
          nullable: true
        marks:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        start_date:
          type: string
          format: date-time
          nullable: true
        status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Status072Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        accept_late:
          type: boolean
          nullable: true
        submission_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/SubmissionTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        graded:
          type: boolean
          nullable: true
    PatchedUpdateCourseMaterial:
      type: object
      description: Serializer to handle the update of CourseMaterial instances.
      properties:
        file:
          type: array
          items:
            type: string
          nullable: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        folder:
          type: string
          format: uuid
          nullable: true
        url:
          type: string
          nullable: true
        author:
          type: string
          nullable: true
          maxLength: 255
        attachments:
          type: array
          items: {}
          nullable: true
    PatchedUpdateQuestion:
      type: object
      description: |-
        Serializer for the Question model.

        The WriteQuestionSerializer class provides serialization and deserialization
        functionality for the Question model, converting between its instances
      properties:
        name:
          type: string
          nullable: true
          maxLength: 255
        text:
          type: array
          items:
            type: string
          nullable: true
        attachments:
          type: array
          items: {}
          nullable: true
    PatchedUpdateStudentProfile:
      type: object
      description: CreateStudentSerializer creates a new student account
      properties:
        matric:
          type: string
          nullable: true
          maxLength: 50
        faculty:
          type: string
          format: uuid
          nullable: true
        department:
          type: string
          format: uuid
          nullable: true
        level:
          type: string
          nullable: true
          maxLength: 10
        grade:
          type: string
          format: uuid
          nullable: true
        arm:
          type: string
          nullable: true
          maxLength: 50
        class_number:
          type: string
          nullable: true
          maxLength: 50
    PatchedUpdateTeacherProfile:
      type: object
      description: CreateStudentSerializer creates a new student account
      properties:
        title:
          type: string
          nullable: true
          maxLength: 500
    PaymentMethodEnum:
      enum:
      - card
      - cash
      - bank
      type: string
      description: |-
        * `card` - Card
        * `cash` - Cash
        * `bank` - Bank
    PostTypeEnum:
      enum:
      - text
      - link
      - images
      type: string
      description: |-
        * `text` - Text
        * `link` - Link
        * `images` - Images
    Preference:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        email:
          type: boolean
        text:
          type: boolean
        push:
          type: boolean
        assignment_push:
          type: boolean
        assignment_email:
          type: boolean
        quiz_push:
          type: boolean
        quiz_email:
          type: boolean
        discussion_push:
          type: boolean
        discussion_email:
          type: boolean
        reply_push:
          type: boolean
        reply_email:
          type: boolean
        announcements:
          type: boolean
        class_schedule:
          type: boolean
        due_assignment_and_quizzes:
          type: boolean
        new_assignment:
          type: boolean
        new_discussions:
          type: boolean
        replies:
          type: boolean
        user:
          type: string
          format: uuid
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - date_created
      - id
      - last_updated
      - user
    PreferenceUpdate:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        email:
          type: boolean
        text:
          type: boolean
        push:
          type: boolean
        assignment_push:
          type: boolean
        assignment_email:
          type: boolean
        quiz_push:
          type: boolean
        quiz_email:
          type: boolean
        discussion_push:
          type: boolean
        discussion_email:
          type: boolean
        reply_push:
          type: boolean
        reply_email:
          type: boolean
        announcements:
          type: boolean
        class_schedule:
          type: boolean
        due_assignment_and_quizzes:
          type: boolean
        new_assignment:
          type: boolean
        new_discussions:
          type: boolean
        replies:
          type: boolean
      required:
      - date_created
      - id
      - last_updated
    ProfileView:
      type: object
      description: |-
        Serializer for viewing and editing user profiles.

        This serializer is used to validate and serialize the data related to user profiles, both for viewing
        and potential updates. It comprises fields like id, fullname, phone, gender, and so on.

        ATTRIBUTES
        ----------
        id : CharField
            The unique identifier for the user. This field is mandatory.

        fullname : CharField
            The full name of the user. This field is optional.

        phone : CharField
            The phone number of the user. This field is mandatory.

        gender : CharField
            The gender of the user. This field is optional and can be set to null.

        email : EmailField
            The email address of the user. This field is mandatory.

        username : CharField
            The username of the user. This field is mandatory.

        title : CharField
            The academic or professional title of the user (e.g., Dr., Prof., etc.). This field is optional and
            can be set to null or left blank.

        token : CharField
            The authentication token associated with the user. This field is mandatory, but it can be set to null
            or left blank.

        image : CharField
            The profile image URL or path for the user. This field is mandatory, but it can be set to null or
            left blank.

        METHODS
        -------
        create(validated_data: dict) -> object:
            Creates a new instance of the profile based on the provided validated data. Note that this
            implementation relies on the parent's create method.

        update(instance: object, validated_data: dict) -> object:
            Updates an existing profile instance with the given validated data. Note that this implementation
            relies on the parent's update method.
      properties:
        id:
          type: string
          maxLength: 255
        fullname:
          type: string
        phone:
          type: string
        gender:
          type: string
          nullable: true
        email:
          type: string
          format: email
        username:
          type: string
        is_teacher:
          type: boolean
        title:
          type: string
          nullable: true
        token:
          type: string
          nullable: true
        image:
          type: string
          nullable: true
      required:
      - email
      - id
      - image
      - is_teacher
      - phone
      - token
      - username
    Question:
      type: object
      description: |-
        Serializer for the Question Model
        General serializer for reading complete Question data with a depth of 1
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        quiz:
          $ref: '#/components/schemas/Id'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        question:
          type: string
        options:
          type: array
          items:
            type: string
          nullable: true
        feedback:
          type: string
          nullable: true
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - date_created
      - id
      - last_updated
      - quiz
    QuestionCreate:
      type: object
      description: |-
        Serializer for creating the Question object
        Specifies fields to be used from form/request_data
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        question:
          type: string
        options:
          type: array
          items:
            type: string
          nullable: true
        quiz:
          type: string
          format: uuid
        answer:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        school:
          type: string
          format: uuid
          nullable: true
        feedback:
          type: string
          nullable: true
      required:
      - id
      - quiz
    QuestionIndex:
      type: object
      properties:
        index:
          type: integer
      required:
      - index
    QuestionTypeEnum:
      enum:
      - multiple_choice
      type: string
      description: '* `multiple_choice` - Multiple Choice'
    QuestionUpdate:
      type: object
      description: |-
        Serializer for updating the Question object
        Specifies fields to be used in updating, similar to create but features only changeable fields
      properties:
        question:
          type: string
        options:
          type: array
          items:
            type: string
          nullable: true
        answer:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        feedback:
          type: string
          nullable: true
    Quiz:
      type: object
      description: |-
        Serializer for the Quiz Model
        General serializer for reading complete Quiz data with a depth of 1
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        course:
          $ref: '#/components/schemas/Id'
        creator:
          $ref: '#/components/schemas/QuizUser'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 300
        type:
          oneOf:
          - $ref: '#/components/schemas/TypeF3eEnum'
          - $ref: '#/components/schemas/BlankEnum'
        start_time:
          type: string
          format: date-time
          nullable: true
        shuffle_questions:
          type: boolean
        allow_late_entries:
          type: boolean
        time_limit:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        graded:
          type: boolean
        marks_per_question:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        marks:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        deadline:
          type: string
          format: date-time
          nullable: true
        status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Status072Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        submission_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        question_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/QuestionTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - course
      - creator
      - date_created
      - id
      - last_updated
      - school
    QuizCreate:
      type: object
      description: |-
        Serializer for creating the Quiz object
        Specifies fields to be used from form/request_data
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        name:
          type: string
          maxLength: 300
        type:
          oneOf:
          - $ref: '#/components/schemas/TypeF3eEnum'
          - $ref: '#/components/schemas/BlankEnum'
        start_time:
          type: string
          format: date-time
          nullable: true
        shuffle_questions:
          type: boolean
        allow_late_entries:
          type: boolean
        time_limit:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        graded:
          type: boolean
        marks_per_question:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        marks:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        course:
          type: string
          format: uuid
        deadline:
          type: string
          format: date-time
          nullable: true
        status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Status072Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        creator:
          type: string
          format: uuid
          nullable: true
        question_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/QuestionTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - course
      - id
    QuizStudentSubmission:
      type: object
      properties:
        id:
          type: string
        fullname:
          type: string
        matric:
          type: string
        grade:
          $ref: '#/components/schemas/Grade'
        submission:
          $ref: '#/components/schemas/QuizSubmission'
      required:
      - fullname
      - grade
      - id
      - matric
      - submission
    QuizSubmission:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        student:
          $ref: '#/components/schemas/Student'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        answers: {}
        answer_breakdown:
          nullable: true
        quiz:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        grade:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - answers
      - date_created
      - grade
      - id
      - last_updated
      - quiz
      - school
      - student
    QuizSubmit:
      type: object
      description: Sample serializer for quiz submission
      properties:
        quiz:
          type: string
          format: uuid
      required:
      - quiz
    QuizUpdate:
      type: object
      description: |-
        Serializer for updating the Quiz object
        Specifies fields to be used in updating, similar to create but features only changeable fields
      properties:
        name:
          type: string
          maxLength: 300
        type:
          oneOf:
          - $ref: '#/components/schemas/TypeF3eEnum'
          - $ref: '#/components/schemas/BlankEnum'
        start_time:
          type: string
          format: date-time
          nullable: true
        shuffle_questions:
          type: boolean
        allow_late_entries:
          type: boolean
        time_limit:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        graded:
          type: boolean
        marks_per_question:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        marks:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Status072Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        question_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/QuestionTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        deadline:
          type: string
          format: date-time
          nullable: true
    QuizUser:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        fullname:
          type: string
          nullable: true
          maxLength: 500
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
    ReadAnnouncement:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        author:
          allOf:
          - $ref: '#/components/schemas/Author'
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        subject:
          type: string
          maxLength: 255
        body:
          type: array
          items:
            type: string
          nullable: true
        course:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        recipients:
          type: array
          items:
            $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - author
      - course
      - date_created
      - id
      - last_updated
      - recipients
      - school
      - subject
    ReadQuestion:
      type: object
      description: |-
        Serializer for the Question model.

        The QuestionSerializer class provides serialization and deserialization
        functionality for the Question model, converting between its instances
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          nullable: true
          maxLength: 255
        text:
          type: array
          items:
            type: string
          nullable: true
        attachments:
          type: array
          items: {}
          nullable: true
        course:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        assignment:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - assignment
      - course
      - date_created
      - id
      - last_updated
      - school
    ReadReciept:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        announcement:
          $ref: '#/components/schemas/ReadAnnouncement'
        user:
          $ref: '#/components/schemas/User'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        is_read:
          type: boolean
      required:
      - announcement
      - date_created
      - id
      - last_updated
      - user
    RegisterTeacher:
      type: object
      description: |-
        Serializer for registering a new teacher.

        This serializer inherits from `RegisterUserSerializer` and is used to validate the incoming data
        specifically for teacher registration. .
      properties:
        image:
          type: string
          format: uri
        fullname:
          type: string
        gender:
          type: string
        phone:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
          minLength: 8
        title:
          type: string
      required:
      - email
      - fullname
      - password
    RegisterUser:
      type: object
      description: |-
        Serializer for registering a new user.

        This serializer is used to validate the incoming data for user registration. It checks the data types,
        presence, and other constraints for each field and also employs custom validators for certain fields,
        such as email and phone, to ensure uniqueness and validity.

        ATTRIBUTES
        ----------
        image : URLField
            The profile image URL for the user. This field is optional and can be left blank.

        fullname : CharField
            The full name of the user. This field is mandatory for user registration.

        gender : CharField
            The gender of the user. This field is mandatory.
            # TODO: Should this field be mandatory?

        phone : CharField
            The phone number of the user. This field is mandatory and is validated with the
            `phone_exists_validator` to ensure the phone number's uniqueness and validity.

        email : EmailField
            The email address of the user. This field is mandatory and is validated with the
            `validate_email` function to ensure the email's uniqueness.

        password : CharField
            The password for the user. This field is mandatory, is write-only for security reasons,
            and must have a minimum length of 8 characters.
      properties:
        image:
          type: string
          format: uri
        fullname:
          type: string
        gender:
          type: string
        phone:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          writeOnly: true
          minLength: 8
        title:
          type: string
      required:
      - email
      - fullname
      - password
    Role3efEnum:
      enum:
      - teacher
      - lecturer
      - assistant
      - student_assistant
      type: string
      description: |-
        * `teacher` - Teacher
        * `lecturer` - Lecturer
        * `assistant` - Assistant
        * `student_assistant` - Student Assistant
    Role694Enum:
      enum:
      - 3
      - 2
      - 1
      type: integer
      description: |-
        * `3` - Superadmin
        * `2` - Academic Admin
        * `1` - Non-Academic Admin
    SMSMessage:
      type: object
      properties:
        id:
          type: string
          maxLength: 32
        from_number:
          type: string
          maxLength: 20
        to_number:
          type: string
          maxLength: 20
        parts:
          type: integer
          maximum: 32767
          minimum: 0
        message:
          type: string
        created:
          type: string
          format: date-time
        cost:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        direction:
          type: string
          maxLength: 10
      required:
      - cost
      - created
      - direction
      - from_number
      - id
      - message
      - parts
      - to_number
    Schedule:
      type: object
      description: Serializer for reading Schedule model
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        course:
          $ref: '#/components/schemas/CalendarCourse'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        day_of_week:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/DayOfWeekEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        start_time:
          type: string
          format: date-time
          nullable: true
        end_time:
          type: string
          format: date-time
          nullable: true
        is_recurring:
          type: boolean
          nullable: true
        end_date:
          type: string
          format: date-time
          nullable: true
        type:
          type: string
          nullable: true
          maxLength: 50
        title:
          type: string
          nullable: true
          maxLength: 200
        frequency:
          type: string
          nullable: true
          maxLength: 200
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - course
      - date_created
      - id
      - last_updated
      - school
    ScheduleCreate:
      type: object
      description: Serializer for creating a new Schedule object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        day_of_week:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/DayOfWeekEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        start_time:
          type: string
          format: date-time
          nullable: true
        end_time:
          type: string
          format: date-time
          nullable: true
        is_recurring:
          type: boolean
          nullable: true
        end_date:
          type: string
          format: date-time
          nullable: true
        course:
          type: string
          format: uuid
        title:
          type: string
          nullable: true
          maxLength: 200
        school:
          type: string
          format: uuid
          nullable: true
        days_of_week:
          type: array
          items:
            $ref: '#/components/schemas/DaysOfWeekEnum'
          nullable: true
        frequency:
          type: string
          nullable: true
          maxLength: 200
      required:
      - course
      - id
    ScheduleUpdate:
      type: object
      description: Serializer for updating a schedule object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        day_of_week:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/DayOfWeekEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        start_time:
          type: string
          format: date-time
          nullable: true
        end_time:
          type: string
          format: date-time
          nullable: true
        is_recurring:
          type: boolean
          nullable: true
        end_date:
          type: string
          format: date-time
          nullable: true
        title:
          type: string
          nullable: true
          maxLength: 200
        frequency:
          type: string
          nullable: true
          maxLength: 200
      required:
      - id
    School:
      type: object
      description: |-
        Serializer for the School model.

        The SchoolSerializer class provides serialization and deserialization
        functionality for the School model, converting between its instances
        and their JSON representation.

        PARAMETERS
        ----------
        serializers.ModelSerializer:
            Inherits from the ModelSerializer of Django Rest Framework which
            provides default implementations for create() and update()
            and default field mapping for the model's fields.

        ATTRIBUTES
        ----------
        Meta:
            An internal class that provides metadata to the parent serializer,
            specifying the model it works with and its fields.

        RETURNS
        -------
        JSON representation of the School model instance.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        creator:
          $ref: '#/components/schemas/Creator'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 1000
        code:
          type: string
          maxLength: 1000
        description:
          type: string
          nullable: true
        school_type:
          $ref: '#/components/schemas/SchoolTypeEnum'
        logo:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        address:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
          maxLength: 20
        email:
          type: string
          nullable: true
          maxLength: 100
        created_date:
          type: string
          format: date-time
          nullable: true
        levels:
          type: array
          items:
            type: string
          nullable: true
        size:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        num_of_faculties:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
      required:
      - code
      - creator
      - date_created
      - id
      - last_updated
      - name
    SchoolAdmin:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          $ref: '#/components/schemas/User'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        role:
          nullable: true
          minimum: -2147483648
          maximum: 2147483647
          oneOf:
          - $ref: '#/components/schemas/Role694Enum'
          - $ref: '#/components/schemas/NullEnum'
        status:
          $ref: '#/components/schemas/StatusA50Enum'
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - date_created
      - id
      - last_updated
      - school
      - user
    SchoolAdminDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          $ref: '#/components/schemas/UserWithoutPassword'
        school:
          $ref: '#/components/schemas/School'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        role:
          nullable: true
          minimum: -2147483648
          maximum: 2147483647
          oneOf:
          - $ref: '#/components/schemas/Role694Enum'
          - $ref: '#/components/schemas/NullEnum'
        status:
          $ref: '#/components/schemas/StatusA50Enum'
      required:
      - date_created
      - id
      - last_updated
      - school
      - user
    SchoolCreate:
      type: object
      description: Serializer for creating a school object
      properties:
        name:
          type: string
          maxLength: 1000
        code:
          type: string
          maxLength: 1000
        description:
          type: string
          nullable: true
        school_type:
          $ref: '#/components/schemas/SchoolTypeEnum'
        logo:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        address:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
          maxLength: 20
        email:
          type: string
          nullable: true
          maxLength: 100
        creator:
          type: string
          format: uuid
          nullable: true
        created_date:
          type: string
          format: date-time
          nullable: true
        levels:
          type: array
          items:
            type: string
          nullable: true
        size:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
      required:
      - code
      - name
    SchoolGrade:
      type: object
      description: Serializer for the general representation of a Grade object, many
        or single
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 200
        code:
          type: string
          nullable: true
          maxLength: 10
        arms:
          type: array
          items:
            type: string
          nullable: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        teacher:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - date_created
      - id
      - last_updated
      - name
      - school
      - teacher
    SchoolGradeCreate:
      type: object
      description: |-
        Serializer to create a Grade object
        Contains fields that can be inserted into the model

        Note: the school and teacher fields allow for the passing of id strings in the request
      properties:
        name:
          type: string
          maxLength: 200
        code:
          type: string
          nullable: true
          maxLength: 10
        school:
          type: string
          format: uuid
        teacher:
          type: string
          format: uuid
          nullable: true
        arms:
          type: array
          items:
            type: string
          nullable: true
      required:
      - name
      - school
    SchoolGradeUpdate:
      type: object
      description: |-
        Serializer for the updating of the Grade object
        Contains fields that can/should be updated
      properties:
        name:
          type: string
          maxLength: 200
        code:
          type: string
          nullable: true
          maxLength: 10
        teacher:
          type: string
          format: uuid
          nullable: true
        arms:
          type: array
          items:
            type: string
          nullable: true
      required:
      - name
    SchoolOwnership:
      type: object
      properties:
        email:
          type: string
          format: email
        token:
          type: string
      required:
      - email
      - token
    SchoolTypeEnum:
      enum:
      - university
      - k12
      - other
      type: string
      description: |-
        * `university` - University
        * `k12` - K-12
        * `other` - Other
    SchoolUpdate:
      type: object
      description: Serializer for updating a School object
      properties:
        name:
          type: string
          maxLength: 1000
        code:
          type: string
          maxLength: 1000
        description:
          type: string
          nullable: true
        school_type:
          $ref: '#/components/schemas/SchoolTypeEnum'
        logo:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        address:
          type: string
          nullable: true
        phone:
          type: string
          nullable: true
          maxLength: 20
        email:
          type: string
          nullable: true
          maxLength: 100
        created_date:
          type: string
          format: date-time
          nullable: true
        levels:
          type: array
          items:
            type: string
          nullable: true
        size:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        url:
          type: string
          format: uri
          nullable: true
          maxLength: 200
      required:
      - code
      - name
    Search:
      type: object
      properties:
        courses:
          type: array
          items:
            $ref: '#/components/schemas/Course'
        files:
          type: array
          items:
            $ref: '#/components/schemas/CourseMaterial'
        assignments:
          type: array
          items:
            $ref: '#/components/schemas/Assignment'
        quizzes:
          type: array
          items:
            $ref: '#/components/schemas/Quiz'
        announcements:
          type: array
          items:
            $ref: '#/components/schemas/ReadAnnouncement'
        discussions:
          type: array
          items:
            $ref: '#/components/schemas/Discussion'
        outlines:
          type: array
          items:
            $ref: '#/components/schemas/CourseMaterial'
        students:
          type: array
          items:
            $ref: '#/components/schemas/StudentProfile'
        teachers:
          type: array
          items:
            $ref: '#/components/schemas/TeacherProfile'
      required:
      - announcements
      - assignments
      - courses
      - discussions
      - files
      - outlines
      - quizzes
      - students
      - teachers
    SearchCourseStudent:
      type: object
      description: Serializer to handle the representation of a CourseStudent object
        for Search Results
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        student:
          $ref: '#/components/schemas/StudentProfile'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        archived:
          type: boolean
          nullable: true
        course:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - course
      - date_created
      - id
      - last_updated
      - school
      - student
    SearchDiscussion:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        author:
          allOf:
          - $ref: '#/components/schemas/Author'
          readOnly: true
        parent_comment:
          $ref: '#/components/schemas/CoreDiscussion'
        thread:
          $ref: '#/components/schemas/DiscussionWithAuthor'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          maxLength: 500
        body:
          type: array
          items:
            type: string
            maxLength: 20000
          nullable: true
        photos:
          type: array
          items: {}
          nullable: true
        link:
          type: string
          nullable: true
        mute:
          type: boolean
        post_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/PostTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        comment_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        description:
          type: string
          nullable: true
        text:
          type: string
          nullable: true
        course:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - author
      - course
      - date_created
      - id
      - last_updated
      - parent_comment
      - school
      - thread
    State45cEnum:
      enum:
      - published
      - draft
      - archived
      - closed
      type: string
      description: |-
        * `published` - Published
        * `draft` - Draft
        * `archived` - Archived
        * `closed` - Closed
    StateF04Enum:
      enum:
      - PENDING
      - ACCEPTED
      - DECLINED
      type: string
      description: |-
        * `PENDING` - Pending
        * `ACCEPTED` - Accepted
        * `DECLINED` - Declined
    Status072Enum:
      enum:
      - published
      - closed
      - draft
      type: string
      description: |-
        * `published` - Published
        * `closed` - Closed
        * `draft` - Draft
    Status08aEnum:
      enum:
      - completed
      - pending
      - failed
      type: string
      description: |-
        * `completed` - Completed
        * `pending` - Pending
        * `failed` - Failed
    Status7baEnum:
      enum:
      - accepted
      - declined
      - pending
      type: string
      description: |-
        * `accepted` - Accepted
        * `declined` - Declined
        * `pending` - Pending
    Status8e9Enum:
      enum:
      - active
      - self_enrolled
      type: string
      description: |-
        * `active` - Active
        * `self_enrolled` - Self Enrolled
    StatusA50Enum:
      enum:
      - pending
      - accepted
      - rejected
      - active
      - suspended
      type: string
      description: |-
        * `pending` - Pending
        * `accepted` - Accepted
        * `rejected` - Rejected
        * `active` - Active
        * `suspended` - Suspended
    Student:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          $ref: '#/components/schemas/User'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        matric:
          type: string
          nullable: true
          maxLength: 50
        level:
          type: string
          nullable: true
          maxLength: 10
        arm:
          type: string
          nullable: true
          maxLength: 50
        class_number:
          type: string
          nullable: true
          maxLength: 50
        num_courses:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        status:
          $ref: '#/components/schemas/Status8e9Enum'
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        department:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        faculty:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        grade:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - date_created
      - department
      - faculty
      - grade
      - id
      - last_updated
      - school
      - user
    StudentGradesResponse:
      type: object
      description: Serializer to represent response of student grades
      properties:
        metadata:
          type: array
          items:
            $ref: '#/components/schemas/GradesMetadata'
        data:
          type: array
          items:
            $ref: '#/components/schemas/GradesData'
      required:
      - data
      - metadata
    StudentGroup:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        level:
          type: array
          items:
            type: string
            maxLength: 10
          nullable: true
        section:
          type: string
          nullable: true
          maxLength: 100
        arm:
          type: array
          items:
            type: string
            maxLength: 10
          nullable: true
        faculty:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        department:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        course:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        grade:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - course
      - date_created
      - department
      - faculty
      - grade
      - id
      - last_updated
      - school
    StudentInvite:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 254
        matric:
          type: string
          maxLength: 255
        level:
          type: string
          nullable: true
          maxLength: 10
        section:
          type: string
          nullable: true
          maxLength: 50
        arm:
          type: string
          nullable: true
          maxLength: 50
        class_number:
          type: string
          nullable: true
          maxLength: 50
        state:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/StateF04Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        school:
          type: string
          format: uuid
        department:
          type: string
          format: uuid
          nullable: true
        faculty:
          type: string
          format: uuid
          nullable: true
      required:
      - date_created
      - email
      - id
      - last_updated
      - matric
      - name
      - school
    StudentInviteCreate:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 254
        matric:
          type: string
          maxLength: 255
        school:
          type: string
          format: uuid
        department:
          type: string
          format: uuid
          nullable: true
        faculty:
          type: string
          format: uuid
          nullable: true
        level:
          type: string
          nullable: true
          maxLength: 10
        section:
          type: string
          nullable: true
          maxLength: 50
        arm:
          type: string
          nullable: true
          maxLength: 50
        class_number:
          type: string
          nullable: true
          maxLength: 50
        state:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/StateF04Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
      required:
      - email
      - matric
      - name
      - school
    StudentInviteDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 254
        matric:
          type: string
          maxLength: 255
        level:
          type: string
          nullable: true
          maxLength: 10
        section:
          type: string
          nullable: true
          maxLength: 50
        arm:
          type: string
          nullable: true
          maxLength: 50
        class_number:
          type: string
          nullable: true
          maxLength: 50
        state:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/StateF04Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        school:
          type: string
          format: uuid
        department:
          type: string
          format: uuid
          nullable: true
        faculty:
          type: string
          format: uuid
          nullable: true
      required:
      - date_created
      - email
      - id
      - last_updated
      - matric
      - name
      - school
    StudentInviteUpdate:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 254
        matric:
          type: string
          maxLength: 255
        department:
          type: string
          format: uuid
          nullable: true
        faculty:
          type: string
          format: uuid
          nullable: true
        level:
          type: string
          nullable: true
          maxLength: 10
        section:
          type: string
          nullable: true
          maxLength: 50
        arm:
          type: string
          nullable: true
          maxLength: 50
        class_number:
          type: string
          nullable: true
          maxLength: 50
        state:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/StateF04Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
      required:
      - email
      - matric
      - name
    StudentProfile:
      type: object
      description: |-
        serializer to represent the student model
        suitable for viewing a complete student profile
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          $ref: '#/components/schemas/UserWithoutPassword'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        matric:
          type: string
          nullable: true
          maxLength: 50
        level:
          type: string
          nullable: true
          maxLength: 10
        arm:
          type: string
          nullable: true
          maxLength: 50
        class_number:
          type: string
          nullable: true
          maxLength: 50
        num_courses:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        status:
          $ref: '#/components/schemas/Status8e9Enum'
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        department:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        faculty:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        grade:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - date_created
      - department
      - faculty
      - grade
      - id
      - last_updated
      - school
      - user
    StudentSerializerSubmission:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          $ref: '#/components/schemas/UserWithoutPassword'
        department:
          $ref: '#/components/schemas/Department'
        faculty:
          $ref: '#/components/schemas/Faculty'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        matric:
          type: string
          nullable: true
          maxLength: 50
        level:
          type: string
          nullable: true
          maxLength: 10
        arm:
          type: string
          nullable: true
          maxLength: 50
        class_number:
          type: string
          nullable: true
          maxLength: 50
        num_courses:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        status:
          $ref: '#/components/schemas/Status8e9Enum'
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        grade:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - date_created
      - department
      - faculty
      - grade
      - id
      - last_updated
      - school
      - user
    StudentSubmission:
      type: object
      properties:
        id:
          type: string
        fullname:
          type: string
        matric:
          type: string
        grade:
          $ref: '#/components/schemas/Grade'
        submission:
          $ref: '#/components/schemas/Submission'
      required:
      - fullname
      - grade
      - id
      - matric
      - submission
    Submission:
      type: object
      description: |-
        Serializer for the Submission model.

        The SubmissionSerializer class provides serialization and deserialization
        functionality for the Submission model, converting between its instances
        and JSON.
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        student:
          $ref: '#/components/schemas/StudentSerializerSubmission'
        assignment:
          $ref: '#/components/schemas/Assignment'
        grade:
          $ref: '#/components/schemas/Grade'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        text:
          type: array
          items:
            type: string
          nullable: true
        files:
          type: array
          items: {}
          nullable: true
        notes:
          type: string
        student_feedback:
          type: string
        teacher_feedback:
          type: string
        is_graded:
          type: boolean
        status:
          type: string
          nullable: true
          maxLength: 200
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - assignment
      - date_created
      - grade
      - id
      - last_updated
      - school
      - student
    SubmissionMethodEnum:
      enum:
      - OL
      - PY
      type: string
      description: |-
        * `OL` - Online
        * `PY` - Physical
    SubmissionTypeEnum:
      enum:
      - all
      - text
      - file
      type: string
      description: |-
        * `all` - all
        * `text` - text
        * `file` - file
    Subscription:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        students_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        expected_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        status:
          type: string
          maxLength: 20
        due_date:
          type: string
          format: date-time
        currency:
          type: string
          maxLength: 5
        school:
          type: string
          format: uuid
      required:
      - date_created
      - due_date
      - expected_amount
      - id
      - last_updated
      - school
      - students_count
    SubscriptionCreate:
      type: object
      properties:
        students_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        expected_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        status:
          type: string
          maxLength: 20
        due_date:
          type: string
          format: date-time
        currency:
          type: string
          maxLength: 5
        school:
          type: string
          format: uuid
      required:
      - due_date
      - expected_amount
      - school
      - students_count
    SubscriptionDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        school:
          $ref: '#/components/schemas/School'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        students_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        expected_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        status:
          type: string
          maxLength: 20
        due_date:
          type: string
          format: date-time
        currency:
          type: string
          maxLength: 5
      required:
      - date_created
      - due_date
      - expected_amount
      - id
      - last_updated
      - school
      - students_count
    SubscriptionUpdate:
      type: object
      properties:
        students_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        expected_amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        status:
          type: string
          maxLength: 20
        due_date:
          type: string
          format: date-time
        currency:
          type: string
          maxLength: 5
      required:
      - due_date
      - expected_amount
      - students_count
    TeacherInvite:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 254
        state:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/StateF04Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        school:
          type: string
          format: uuid
        department:
          type: string
          format: uuid
          nullable: true
        faculty:
          type: string
          format: uuid
          nullable: true
      required:
      - date_created
      - email
      - id
      - last_updated
      - name
      - school
    TeacherInviteCreate:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 254
        school:
          type: string
          format: uuid
        department:
          type: string
          format: uuid
          nullable: true
        faculty:
          type: string
          format: uuid
          nullable: true
        state:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/StateF04Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
      required:
      - email
      - name
      - school
    TeacherInviteDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 254
        state:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/StateF04Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        school:
          type: string
          format: uuid
        department:
          type: string
          format: uuid
          nullable: true
        faculty:
          type: string
          format: uuid
          nullable: true
      required:
      - date_created
      - email
      - id
      - last_updated
      - name
      - school
    TeacherInviteUpdate:
      type: object
      properties:
        name:
          type: string
          maxLength: 255
        email:
          type: string
          format: email
          maxLength: 254
        department:
          type: string
          format: uuid
          nullable: true
        faculty:
          type: string
          format: uuid
          nullable: true
        state:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/StateF04Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
      required:
      - email
      - name
    TeacherProfile:
      type: object
      description: |-
        serializer to represent the teacher model
        suitable for viewing a complete teacher profile

        In addition to the fields provided by the base
        `TeacherProfileSerializer`, it introduces a `title` field, which represents the teacher's academic or
        professional title (e.g., Dr., Prof., etc.)
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          $ref: '#/components/schemas/UserWithoutPassword'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          nullable: true
          maxLength: 500
        num_courses:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - date_created
      - id
      - last_updated
      - school
      - user
    TeacherProfileCourse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        user:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        title:
          type: string
          nullable: true
          maxLength: 500
        num_courses:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - date_created
      - id
      - last_updated
      - school
      - user
    TeacherRequest:
      type: object
      description: Serializer to represent TeacherRequest data
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        role:
          type: string
          nullable: true
          maxLength: 50
        email:
          type: string
          nullable: true
          maxLength: 200
        accepted:
          type: boolean
          nullable: true
        status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Status7baEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        course:
          type: string
          format: uuid
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - course
      - date_created
      - id
      - last_updated
    TeacherRequestSerializerDetail:
      type: object
      description: Serializer to represent TeacherRequest data in detail
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        role:
          type: string
          nullable: true
          maxLength: 50
        email:
          type: string
          nullable: true
          maxLength: 200
        accepted:
          type: boolean
          nullable: true
        status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Status7baEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        course:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
        school:
          allOf:
          - $ref: '#/components/schemas/Nested'
          readOnly: true
      required:
      - course
      - date_created
      - id
      - last_updated
      - school
    Transaction:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        students_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        start_period:
          type: string
          format: date-time
        end_period:
          type: string
          format: date-time
        payment_method:
          $ref: '#/components/schemas/PaymentMethodEnum'
        status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Status08aEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        currency:
          type: string
          maxLength: 5
        invoice:
          type: string
          format: uuid
        school:
          type: string
          format: uuid
      required:
      - amount
      - date_created
      - end_period
      - id
      - invoice
      - last_updated
      - school
      - start_period
      - students_count
    TransactionCreate:
      type: object
      properties:
        students_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        invoice:
          type: string
          format: uuid
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        start_period:
          type: string
          format: date-time
        end_period:
          type: string
          format: date-time
        payment_method:
          $ref: '#/components/schemas/PaymentMethodEnum'
        status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Status08aEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        currency:
          type: string
          maxLength: 5
        school:
          type: string
          format: uuid
      required:
      - amount
      - end_period
      - invoice
      - school
      - start_period
      - students_count
    TransactionDetail:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        school:
          $ref: '#/components/schemas/School'
        invoice:
          $ref: '#/components/schemas/Invoice'
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        students_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        start_period:
          type: string
          format: date-time
        end_period:
          type: string
          format: date-time
        payment_method:
          $ref: '#/components/schemas/PaymentMethodEnum'
        status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Status08aEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        currency:
          type: string
          maxLength: 5
      required:
      - amount
      - date_created
      - end_period
      - id
      - invoice
      - last_updated
      - school
      - start_period
      - students_count
    TransactionUpdate:
      type: object
      properties:
        students_count:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
        amount:
          type: string
          format: decimal
          pattern: ^-?\d{0,8}(?:\.\d{0,2})?$
        start_period:
          type: string
          format: date-time
        end_period:
          type: string
          format: date-time
        payment_method:
          $ref: '#/components/schemas/PaymentMethodEnum'
        status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Status08aEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        currency:
          type: string
          maxLength: 5
      required:
      - amount
      - end_period
      - start_period
      - students_count
    Type030Enum:
      enum:
      - IPSATIVE
      - NORM
      - CRITERION
      type: string
      description: |-
        * `IPSATIVE` - ipsative
        * `NORM` - norm
        * `CRITERION` - criterion
    Type706Enum:
      enum:
      - ASSIGNMENT
      - QUIZ
      - EXAM
      type: string
      description: |-
        * `ASSIGNMENT` - Assignment
        * `QUIZ` - quiz
        * `EXAM` - Exam
    Type830Enum:
      enum:
      - file
      - link
      - text
      - outline
      type: string
      description: |-
        * `file` - File
        * `link` - Link
        * `text` - Text
        * `outline` - Outline
    Type847Enum:
      enum:
      - reply
      - discussion
      - announcement
      - assignment
      - quiz
      - grade
      type: string
      description: |-
        * `reply` - Reply
        * `discussion` - Discussion
        * `announcement` - Announcement
        * `assignment` - Assignment
        * `quiz` - Quiz
        * `grade` - Grade
    TypeF3eEnum:
      enum:
      - graded
      - practice
      type: string
      description: |-
        * `graded` - Graded
        * `practice` - Practice
    UpdateActivity:
      type: object
      properties:
        type:
          $ref: '#/components/schemas/Type847Enum'
        data: {}
      required:
      - data
      - type
    UpdateAnnouncement:
      type: object
      properties:
        subject:
          type: string
          maxLength: 255
        body:
          type: array
          items:
            type: string
          nullable: true
      required:
      - subject
    UpdateAssignment:
      type: object
      description: |-
        Serializer for the Assignment model.

        The AssignmentSerializer class provides serialization and deserialization
        functionality for the Assignment model, converting between its instances
      properties:
        name:
          type: string
          maxLength: 255
        submission_method:
          oneOf:
          - $ref: '#/components/schemas/SubmissionMethodEnum'
          - $ref: '#/components/schemas/BlankEnum'
        deadline:
          type: string
          format: date-time
          nullable: true
        marks:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        start_date:
          type: string
          format: date-time
          nullable: true
        status:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/Status072Enum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        accept_late:
          type: boolean
          nullable: true
        submission_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/SubmissionTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        graded:
          type: boolean
          nullable: true
    UpdateCourseFolder:
      type: object
      description: Serializer to handle the updating of Folders instances.
      properties:
        folder:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
          maxLength: 255
        author:
          type: string
          nullable: true
          maxLength: 255
      required:
      - name
    UpdateCourseMaterial:
      type: object
      description: Serializer to handle the update of CourseMaterial instances.
      properties:
        file:
          type: array
          items:
            type: string
          nullable: true
        title:
          type: string
          maxLength: 255
        description:
          type: string
          nullable: true
        folder:
          type: string
          format: uuid
          nullable: true
        url:
          type: string
          nullable: true
        author:
          type: string
          nullable: true
          maxLength: 255
        attachments:
          type: array
          items: {}
          nullable: true
    UpdateCourseOutline:
      type: object
      properties:
        attachments:
          type: array
          items: {}
          nullable: true
        file:
          type: array
          items:
            type: string
          nullable: true
    UpdateDirectorySettings:
      type: object
      properties:
        students: {}
        teachers: {}
    UpdatePassword:
      type: object
      description: UpdatePasswordSerializer creates a new student account
      properties:
        email:
          type: string
        password:
          type: string
          minLength: 8
        token:
          type: string
      required:
      - email
      - password
      - token
    UpdateQuestion:
      type: object
      description: |-
        Serializer for the Question model.

        The WriteQuestionSerializer class provides serialization and deserialization
        functionality for the Question model, converting between its instances
      properties:
        name:
          type: string
          nullable: true
          maxLength: 255
        text:
          type: array
          items:
            type: string
          nullable: true
        attachments:
          type: array
          items: {}
          nullable: true
    UpdateSchoolAdmin:
      type: object
      properties:
        role:
          nullable: true
          minimum: -2147483648
          maximum: 2147483647
          oneOf:
          - $ref: '#/components/schemas/Role694Enum'
          - $ref: '#/components/schemas/NullEnum'
        status:
          $ref: '#/components/schemas/StatusA50Enum'
    UpdateStudentProfile:
      type: object
      description: CreateStudentSerializer creates a new student account
      properties:
        matric:
          type: string
          nullable: true
          maxLength: 50
        faculty:
          type: string
          format: uuid
          nullable: true
        department:
          type: string
          format: uuid
          nullable: true
        level:
          type: string
          nullable: true
          maxLength: 10
        grade:
          type: string
          format: uuid
          nullable: true
        arm:
          type: string
          nullable: true
          maxLength: 50
        class_number:
          type: string
          nullable: true
          maxLength: 50
    UpdateTeacherProfile:
      type: object
      description: CreateStudentSerializer creates a new student account
      properties:
        title:
          type: string
          nullable: true
          maxLength: 500
    UpdateUser:
      type: object
      properties:
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        fullname:
          type: string
          nullable: true
          maxLength: 500
        gender:
          type: string
          nullable: true
          maxLength: 100
        phone:
          type: string
          nullable: true
          maxLength: 100
        image:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        title:
          type: string
          nullable: true
          maxLength: 200
    UploadStudent:
      type: object
      properties:
        file:
          type: string
          format: uri
      required:
      - file
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        last_login:
          type: string
          format: date-time
          nullable: true
        is_superuser:
          type: boolean
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        is_staff:
          type: boolean
          title: Staff status
          description: Designates whether the user can log into this admin site.
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        date_joined:
          type: string
          format: date-time
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        fullname:
          type: string
          nullable: true
          maxLength: 500
        gender:
          type: string
          nullable: true
          maxLength: 100
        phone:
          type: string
          nullable: true
          maxLength: 100
        institution:
          type: string
          nullable: true
          maxLength: 3000
        is_teacher:
          type: boolean
        device_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/DeviceTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        device_token:
          type: string
          nullable: true
          maxLength: 1000
        image:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        title:
          type: string
          nullable: true
          maxLength: 200
        subscriptions:
          type: array
          items:
            type: string
          nullable: true
        groups:
          type: array
          items:
            type: integer
          description: The groups this user belongs to. A user will get all permissions
            granted to each of their groups.
        user_permissions:
          type: array
          items:
            type: integer
          description: Specific permissions for this user.
      required:
      - date_created
      - id
      - last_updated
      - username
    UserRegister:
      type: object
      description: UserRegisterSerializer serializes the data needed to create a user
      properties:
        email:
          type: string
          format: email
      required:
      - email
    UserSchedule:
      type: object
      description: Serializer for the user specific schedule response
      properties:
        activities:
          type: array
          items:
            $ref: '#/components/schemas/CalendarActivity'
        schedules:
          type: array
          items:
            $ref: '#/components/schemas/Schedule'
      required:
      - activities
      - schedules
    UserWithoutPassword:
      type: object
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        last_login:
          type: string
          format: date-time
          nullable: true
        is_superuser:
          type: boolean
          title: Superuser status
          description: Designates that this user has all permissions without explicitly
            assigning them.
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
        email:
          type: string
          format: email
          title: Email address
          maxLength: 254
        is_staff:
          type: boolean
          title: Staff status
          description: Designates whether the user can log into this admin site.
        is_active:
          type: boolean
          title: Active
          description: Designates whether this user should be treated as active. Unselect
            this instead of deleting accounts.
        date_joined:
          type: string
          format: date-time
        date_created:
          type: string
          format: date-time
          readOnly: true
          nullable: true
        last_updated:
          type: string
          format: date-time
          readOnly: true
        fullname:
          type: string
          nullable: true
          maxLength: 500
        gender:
          type: string
          nullable: true
          maxLength: 100
        phone:
          type: string
          nullable: true
          maxLength: 100
        institution:
          type: string
          nullable: true
          maxLength: 3000
        is_teacher:
          type: boolean
        device_type:
          nullable: true
          oneOf:
          - $ref: '#/components/schemas/DeviceTypeEnum'
          - $ref: '#/components/schemas/BlankEnum'
          - $ref: '#/components/schemas/NullEnum'
        device_token:
          type: string
          nullable: true
          maxLength: 1000
        image:
          type: string
          format: uri
          nullable: true
          maxLength: 200
        title:
          type: string
          nullable: true
          maxLength: 200
        subscriptions:
          type: array
          items:
            type: string
          nullable: true
        groups:
          type: array
          items:
            type: integer
          description: The groups this user belongs to. A user will get all permissions
            granted to each of their groups.
        user_permissions:
          type: array
          items:
            type: integer
          description: Specific permissions for this user.
      required:
      - date_created
      - id
      - last_updated
      - username
    ValidateOTP:
      type: object
      properties:
        value:
          type: string
          writeOnly: true
          maxLength: 6
        target:
          type: string
          writeOnly: true
          maxLength: 128
      required:
      - target
      - value
    WriteQuestion:
      type: object
      description: |-
        Serializer for the Question model.

        The WriteQuestionSerializer class provides serialization and deserialization
        functionality for the Question model, converting between its instances
      properties:
        name:
          type: string
          nullable: true
          maxLength: 255
        text:
          type: array
          items:
            type: string
          nullable: true
        attachments:
          type: array
          items: {}
          nullable: true
        course:
          type: string
          format: uuid
        assignment:
          type: string
          format: uuid
        school:
          type: string
          format: uuid
          nullable: true
      required:
      - assignment
      - course
